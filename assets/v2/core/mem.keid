namespace core.mem

import (
    core.runtime
    core.ops
)

public struct Pointer<T> {
    address: usize

    public constructor nullptr() {
        super.new()
        this.address = 0
    }

    public constructor to(this.address: usize): Pointer<T> {
        super.new()
    }

    public cast<U>(): Pointer<U> {
        return Pointer.to<U>()
    }

    public offset(val: isize): Pointer<T> {
        return Pointer.to<T>(((this.address as isize) + val * (sizeof(T) as isize)) as usize)
    }

    public offset(val: usize): Pointer<T> {
        return Pointer.to<T>(this.address + val * sizeof(T))
    }

    public offsetBytes(bytes: isize): Pointer<T> {
        return Pointer.to<T>(((this.address as isize) + bytes) as usize)
    }

    public offsetBytes(bytes: usize): Pointer<T> {
        return Pointer.to<T>(this.address + bytes)
    }

    public get isNull: bool => this.address == 0
}

implement <T> Equals<Pointer<T>> for Pointer<T> {
    equals(other: Pointer<T>): bool => this.address == other.address
}

// Copies `sizeof(T) * count` bytes from `src` to `dst`.
public function copy<T>(src: Pointer<T>, dst: Pointer<T>, count: usize) {
    std.impl.mem.copy(Pointer.cast<T, void>(src), Pointer.cast<T, void>(dst), count * sizeof(T))
}

// Allocates `count` by of heap memory and returns the pointer to the allocated region.
public function allocBytes(count: usize): Pointer<void> {
    return std.impl.mem.alloc(count)
}

// Allocates `sizeof(T) * count` bytes of heap and returns the pointer to the allocated region.
public function alloc<T>(count: usize): Pointer<T> {
    return Pointer.cast<void, T>(std.impl.mem.alloc(count * sizeof(T)))
}

// Deallocates the heap memory at a pointer returned by `core.mem.alloc<T>`.
public function dealloc<T>(ptr: Pointer<T>) {
    std.impl.mem.dealloc(Pointer.cast<T, void>(ptr))
}

// Increases the reference count of an object by 1.
@ExternalFunction("keid.scope")
public extern function scope(ptr: Pointer<void>)

// Decreases the reference count of an object by 1.
@ExternalFunction("keid.unscope")
public extern function unscope(ptr: Pointer<void>)
