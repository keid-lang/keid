namespace std.impl.fs

import (
    core.collections
    core.mem
    core.error
    core.runtime
    std.os
    std.impl.syscall
)

const O_RDONLY: uint64 = 0x00000
const O_WRONLY: uint64 = 0x00001
const O_RDWR:   uint64 = 0x00002
const O_CREAT:  uint64 = 0x00040
const O_TRUNC:  uint64 = 0x00200
const O_APPEND: uint64 = 0x00400

extern function opendir(name: Pointer<uint8>): usize
extern function readdir(fd: usize): Pointer<void>

function getIoError(prefix: string): Error {
    let msg = std.impl.sys.getErrorMessage(std.impl.sys.getErrorCode())
    return error.io(string.format(prefix, " (", msg, ")"))
}

public function openFile(path: string, mode: std.fs.FileOpenMode): usize {
    match mode {
        Foo => Bar
    }
    let flags = match mode {
        ReadOnly => O_RDONLY
        ReadWrite => O_RDWR
        ReadWriteTruncate => O_RDWR | O_TRUNC
        WriteOnly => O_WRONLY
        AppendOnly => O_APPEND
        ReadAppend => O_RDONLY | O_APPEND
    }
    let fd = syscall.open(path, flags as usize, 0)
    if fd as isize < 0 {
        throw getIoError("opening file")
    }
    return fd
}

public function createFile(path: string, mode: std.fs.FileOpenMode): usize {
    let flags = match mode {
        ReadOnly => O_RDONLY
        ReadWrite => O_RDWR
        ReadWriteTruncate => O_RDWR | O_TRUNC
        WriteOnly => O_WRONLY
        AppendOnly => O_APPEND
        ReadAppend => O_RDONLY | O_APPEND
    }
    flags = flags | O_CREAT
    let fd = syscall.open(path, flags as usize, 511) // 511 == 0777
    if fd as isize < 0 {
        throw getIoError("opening file")
    }
    return fd
}

public function openDirectory(path: string): usize {
    unsafe {
        with let pathPtr = ref path.toNullTerminated() {
            let fd = opendir(pathPtr)
            if fd == 0 {
                throw getIoError(string.format("opening directory '", path, "'"))
            }
            return fd
        }
    }
}

public function closeFile(fd: usize): uint32 {
    return syscall.close(fd) as uint32
}

public function closeDirectory(fd: usize): uint32 {
    return syscall.close(fd) as uint32
}

public function getFileLength(fd: usize): int64 {
    let size = syscall.seek(fd, 0, std.fs.SeekWhence.End)
    syscall.seek(fd, 0, std.fs.SeekWhence.Start)
    return size
}

public function seekFile(fd: usize, pos: int64, whence: std.fs.SeekWhence): int64 {
    return syscall.seek(fd, pos, whence)
}

public function readFileBytes(fd: usize, buf: [uint8]): int64 {
    return syscall.read(fd, buf)
}

public function writeFileBytes(fd: usize, buf: [uint8]): int64 {
    let written = syscall.write(fd, buf)
    if written as usize != buf.length {
        throw getIoError(string.format("writing to file (wrote ", written.toString(), " / ", buf.length.toString(), " bytes)"))
    }
    return written
}

public function listDirectory(fd: usize): [string] {
    unsafe {
        let list = List.empty<string>()
        let entry: Pointer<void> = Pointer.nullptr<void>()
        for {
            entry = readdir(fd)
            if entry.isNull {
                break
            }
            let namePtr = Pointer.cast<void, uint8>(entry.offsetBytes(19))
            let entryName = string.fromCStr(namePtr)
            if entryName == "." or entryName == ".." {
                continue
            }
            list.push(entryName)
        }
        return list.toArray()
    }
}

public function exists(path: string): bool {
    return syscall.access(path)
}

const ST_MODE_FILE:      usize = 0o100000
const ST_MODE_DIRECTORY: usize = 0o40000

public function stat(fd: usize, followLinks: bool): std.fs.Stats {
    let buffer = [usize](default(usize); 18)

    with let statsPtr = ref buffer {
        if syscall.stat(fd, Pointer.cast<usize, void>(statsPtr), followLinks) != 0 {
            throw getIoError("stat file or directory")
        }
    }

    let mode = buffer[3]
    let isFile = (mode & ST_MODE_FILE) == ST_MODE_FILE
    let isDirectory = (mode & ST_MODE_DIRECTORY) == ST_MODE_DIRECTORY
    return std.fs.Stats.new(isFile, isDirectory)
}
