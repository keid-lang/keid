namespace core::object

import (
    core::error
    core::string
    core::ops
)

public interface Default {
    static default(): object
}

public class Object {
}

public class Box<T> {
    element: T
}

public struct Bool {
    value: bool
}

implement ToString for Bool {
    toString(): string {
        if this.value {
            return "true"
        }
        return "false"
    }
}

public struct Char {
    value: char

    public get isWhitespace: bool => this.value == ' ' || this.value == '\n' || this.value == '\r' || this.value == '\t'

    public get isNumber: bool => this.value >= '0' && this.value <= '9'

    public get lower: char {
        if this.value >= 'A' && this.value <= 'Z' {
            return this.value - 'A' + 'a'
        }
        return this.value
    }

    public get upper: char {
        if this.value >= 'a' && this.value <= 'z' {
            return this.value - 'a' + 'A'
        }
        return this.value
    }
}

implement ToString for Char {
    toString(): string => new string {
        chars = new char[this.value]
    }
}

macro $IMPL_INT_TYPE(#wrapper, #primitive, #signed)
    public struct #wrapper {
        value: #primitive

        public static parse(s: string, base: uint8): #primitive {
            if #signed {
                let i = parseSignedInteger(s, base)
                return i as #primitive // TODO: bounds check
            } else {
                let u = parseUnsignedInteger(s, base)
                return u as #primitive // TODO: bounds check
            }
        }
    }

    implement ToString for #wrapper {
        toString(): string {
            let current = this.value
            if current == 0 {
                return "0"
            }
            
            let sb = StringBuilder.empty()
            let insertAt: usize = 0

            $IF(#signed,
                ```
                if current < 0 {
                    sb.append("-")
                    insertAt = 1
                }
                ```
            )

            while current != 0 {
                let digit = (current % 10) + 0x30 // converts the digit to its ascii equivalent
                sb.insert(insertAt, digit as char)
                current /= 10
            }

            return sb.toString()
        }
    }

    implement Hash for #wrapper {
        hash(hasher: Hasher) {
            hasher.write(this)
        }
    }

    implement Equals<#wrapper> for #wrapper {
        equals(other: #wrapper): bool => this.value == other.value
    }
end macro

$IMPL_INT_TYPE(Int8,  int8,  true)
$IMPL_INT_TYPE(Int16, int16, true)
$IMPL_INT_TYPE(Int32, int32, true)
$IMPL_INT_TYPE(Int64, int64, true)
$IMPL_INT_TYPE(ISize, isize, true)

$IMPL_INT_TYPE(UInt8,  uint8,  false)
$IMPL_INT_TYPE(UInt16, uint16, false)
$IMPL_INT_TYPE(UInt32, uint32, false)
$IMPL_INT_TYPE(UInt64, uint64, false)
$IMPL_INT_TYPE(USize,  usize,  false)

// $IMPL_FLOAT_TYPE(Float32, float32)
// $IMPL_FLOAT_TYPE(Float64, float64)

function throwParseFailure(c: char) {
    throw Error.create(string.format("unexpected token '", c.toString(), "'"))
}

public function parseSignedInteger(s: string, base: uint8): int64 {
    let sign: int64 = 1
    if s.chars[0] == '-' {
        sign = -1
        s = s.substringAfter(1)
    } else if s.chars[0] == '+' {
        s = s.substringAfter(1)
    }

    let n = parseUnsignedInteger(s, base) as int64
    return n * sign
}

public function parseUnsignedInteger(s: string, base: uint8): uint64 {
    let val: uint64 = 0

    if s.length == 0 {
        throw Error.create("empty string cannot be parsed into an integer")
    }

    if base == 0 {
        base = 10
        if s.chars[0] == '0' {
            if s.length >= 3 {
                if s.chars[1] == 'b' || s.chars[1] == 'B' {
                    base = 2
                    s = s.substringAfter(2)
                } else if s.chars[1] == 'o' || s.chars[1] == 'O' {
                    base = 8
                    s = s.substringAfter(2)
                } else if s.chars[1] == 'x' || s.chars[1] == 'X' {
                    base = 16
                    s = s.substringAfter(2)
                }
            }
        }
    }

    for c in s.chars {
        let d: uint8 = 0
        if c >= '0' && c <= '9' {
            d = (c - '0') as uint8
        } else if c.lower >= 'a' && c.lower <= 'z' {
            d = (c.lower - 'a') as uint8 + 10
        } else {
            throwParseFailure(c)
        }
        if d >= base {
            throwParseFailure(c)
        }
        val *= base as uint64
        val += d as uint64
    }

    return val
}
