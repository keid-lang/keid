namespace core::object

import (
    core::string
)

public interface Default {
    static default(): object
}

public class Object {
}

public class Box<T> {
    element: T
}

public struct Bool {
    value: bool
}

implement ToString for Bool {
    toString(): string {
        if this.value {
            return "true"
        }
        return "false"
    }
}

public struct Char {
    value: char

    public isWhitespace(): bool => this.value == ' ' || this.value == '\n' || this.value == '\r' || this.value == '\t'
}

implement ToString for Char {
    toString(): string => new string {
        chars = new char[this.value]
    }
}

public interface StringConvert {
    static fromString(val: string): This
}

macro $IMPL_INT_TYPE(#wrapper, #primitive)
    public struct #wrapper {
        value: #primitive
    }

    implement ToString for #wrapper {
        toString(): string {
            let current = this.value
            if current == 0 {
                return "0"
            }
            
            let sb = StringBuilder.empty()
            while current > 0 {
                let digit = (current % 10) + 0x30 // converts the digit to its ascii equivalent
                sb.insert(0, String.fromUtf8(new uint8[digit as uint8]))
                current /= 10
            }

            return sb.toString()
        }
    }

    implement StringConvert for #wrapper {
        public static fromString(val: string): #wrapper {
            let value: #primitive = 0
            for i in range.create(val.length) {
                let ch = val.chars[val.length - i - 1]
                let digit = match ch {
                    '0' => 0
                    '1' => 1
                    '2' => 2
                    '3' => 3
                    '4' => 4
                    '5' => 5
                    '6' => 6
                    '7' => 7
                    '8' => 8
                    '9' => 9
                    _ => throw core::error::Error.create("invalid integer digit: ", ch.toString())
                }
                value += math.pow<#primitive>(digit, i + 1)
            }
            return value
        }
    }
end macro

$IMPL_INT_TYPE(Int8,  int8)
$IMPL_INT_TYPE(Int16, int16)
$IMPL_INT_TYPE(Int32, int32)
$IMPL_INT_TYPE(Int64, int64)
$IMPL_INT_TYPE(ISize, isize)

$IMPL_INT_TYPE(UInt8,  uint8)
$IMPL_INT_TYPE(UInt16, uint16)
$IMPL_INT_TYPE(UInt32, uint32)
$IMPL_INT_TYPE(UInt64, uint64)
$IMPL_INT_TYPE(USize,  usize)
