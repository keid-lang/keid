namespace core::object

import (
    core::ops
)

const DEFAULT_PRIME: uint64 = 7
const ELEMENT_PRIME: uint64 = 31

macro $DEF_WRITE(#type)
    public write(val: #type) {
        this.state = ELEMENT_PRIME * this.state + val as uint64
    }
end macro

public class Hasher {
    state: uint64

    public static create(): Hasher => new Hasher { state = DEFAULT_PRIME, }

    $DEF_WRITE(uint8)
    $DEF_WRITE(uint16)
    $DEF_WRITE(uint32)
    $DEF_WRITE(uint64)
    $DEF_WRITE(usize)
    $DEF_WRITE(int8)
    $DEF_WRITE(int16)
    $DEF_WRITE(int32)
    $DEF_WRITE(int64)
    $DEF_WRITE(isize)
    $DEF_WRITE(char)

    public write<T: Hash>(val: T) {
        val.hash(this)
    }
}

public function hashOf<T: Hash>(val: T): uint64 {
    let hasher = Hasher.create()
    val.hash(hasher)
    return hasher.state
}
