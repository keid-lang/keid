namespace core::string

import (
    core::collections
)

public class StringBuilder {
    buffer: ArrayBackedStorage<char>
    pos: usize

    public get capacity: usize => this.buffer.capacity

    public static empty(): StringBuilder => StringBuilder.withCapacity(0)

    public static withCapacity(capacity: usize): StringBuilder {
        let buffer = ArrayBackedStorage.withCapacity<char>(capacity)
        return new StringBuilder {
            buffer
            pos = 0
        }
    }

    public move(pos: isize) {
        let newPos: isize = (this.pos as isize) + pos
        if newPos < 0 {
            throw error.indexOutOfBounds(newPos)
        }
        this.pos = newPos as usize
    }

    public append(val: char) {
        this.buffer.ensureCapacity(this.pos + 1)
        this.buffer.setElement(this.pos, val)
        this.pos += 1
    }

    public append(val: string) {
        this.buffer.ensureCapacity(this.pos + val.length)
        for i in range.create(0, val.chars.length) {
            this.buffer.setElement(this.pos, val.chars[i])
            this.pos += 1
        }
    }

    public insert(index: usize, val: string) {
        this.buffer.ensureCapacity(this.pos + val.length)
        for i in range.create(this.pos, index) {
            let currentCh = this.buffer.getElement(i)
            this.buffer.setElement(i + val.length, currentCh)
        }
        for i in range.create(0, val.length) {
            this.buffer.setElement(i + index, val.chars[i])
        }
        this.pos += val.length
    }

    /// Clears the underlying buffer, resetting the `StringBuilder` to an empty state.
    public reset() {
        this.pos = 0
        this.buffer = ArrayBackedStorage.withCapacity<char>()
    }

    /// Returns a new string whose value is a copy of the current state of this `Builder`.
    public toString(): string {
        let copy = new char[default(char); this.pos]
        array.copy<char>(this.buffer.array, 0, copy, 0, this.pos)
        return new string {
            chars = copy
        }
    }

    /// Returns a new string whose value is shared with this buffer.
    /// Changes to the buffer MAY OR MAY NOT be reflected in the value of the string.
    /// This should only ever be used when it is GUARANTEED that no further changes
    /// to this `Builder` occur during the entire lifetime of this object. 
    /// This is almost never what you want to use. You should use `toString` instead.
    public toRefString(): string => new string {
        chars = this.buffer.array[:this.pos]
    }
}

