namespace core::string::test

import (
    core::mem
    core::string
)
 
function testEmptyString() {
    let s = ""
    test.assertEqual(s, "")
    test.assertTrue(s.equals(""))
    test.assertNotEqual(s, "not empty")
    test.assertTrue(!s.equals("not empty"))
    test.assertEqual(s.length, 0)
    test.assertEqual(s.chars.length, 0)
}

function testFromUtf8() {
    let chars = new uint8[65; 5] // 65 == 'A'
    let s = String.fromUtf8(chars)
    test.assertEqual(s, "AAAAA")
    test.assertTrue(s.equals("AAAAA"))
    test.assertNotEqual(s, "not AAAAA")
    test.assertTrue(!s.equals("not AAAAA"))
    test.assertEqual(s.length, 5)
    test.assertEqual(s.chars.length, 5)
}

function testStringToString() {
    let s = "This is a String!"
    test.assertEqual(s, "This is a String!")
    test.assertNotEqual(s, "This is not a String!")
    test.assertEqual(s.toString(), s)
    test.assertTrue(s.toString().equals(s))
    test.assertEqual(s.toString(), s.toString())
    test.assertTrue(s.toString().equals(s.toString()))
    test.assertEqual(s.toString(), "This is a String!")
    test.assertNotEqual(s.toString(), "This is not a String!")
    test.assertEqual(s.toString().length, s.length)
}

function testStringEquals() {
    let a = "STRING A"
    let b = "String B"
    let anotherA = " STRING A "
    let empty = ""

    test.assertEqual(a.length, b.length)
    test.assertEqual(a, a)
    test.assertEqual(b, b)
    test.assertNotEqual(a, b)
    test.assertEqual(anotherA, anotherA)
    test.assertNotEqual(a, anotherA)
    test.assertNotEqual(b, anotherA)
    test.assertNotEqual(a, empty)
    test.assertNotEqual(b, empty)
    test.assertNotEqual(anotherA, empty)
    test.assertEqual(empty, empty)
}

function testStringsWithNul() {
    let chars = new uint8[66; 5] // 66 = 'B'
    chars[1] = 0
    chars[4] = 0
    // chars is now [66, 0, 66, 66, 0]

    let s = String.fromUtf8(chars)
    test.assertEqual(s.length, 5)
    test.assertNotEqual(s, "B")
    test.assertNotEqual(s, "B\0")
    test.assertNotEqual(s, "B\0BB")
    // FAILS test.assertTrue(s == "B\0BB\0")

    let chars2 = new uint8[0; 1]
    let s2 = String.fromUtf8(chars2)
    test.assertEqual(s2.length, 1)
    // FAILS test.assertTrue(s2 == "\0")
}

function testStringAddition() {
    test.assertEqual("a" + "b", "ab")
    test.assertEqual("a" + "b" + "c", "abc")
}

function testStringFromCStr() {
    let myString = "Hello, I am a String."
    let myStringNul = myString.toNullTerminated()
    unsafe {
        fixed let myStringCStr = ref myStringNul {
            let myStringFromCStr = string.fromCStr(myStringCStr) 
            test.assertEqual(myStringFromCStr, "Hello, I am a String.")
        }
    }
}

function testIndexOf() {
    let a = "foobar"

    test.assertNotNull(a.indexOf("b", 0))
    test.assertEqual(a.indexOf("b", 0)!, 3)
    test.assertNull(a.indexOf("z", 0))
    test.assertEqual(a.indexOf("foo", 0)!, 0)
    test.assertEqual(a.indexOf("bar", 0)!, 3)
    test.assertEqual(a.indexOf("o", 0)!, 1)

    test.assertNotNull(a.indexOf("b"))
    test.assertEqual(a.indexOf("b")!, 3)
    test.assertNull(a.indexOf("z"))
    test.assertEqual(a.indexOf("foo")!, 0)
    test.assertEqual(a.indexOf("bar")!, 3)
    test.assertEqual(a.indexOf("o")!, 1)
    test.assertEqual(a.indexOf("o", 2)!, 2)
}

function testSubstring() {
    let a = "SOMETHING"
    test.assertEqual(a.substring(0, 1), "S")
    test.assertEqual(a.substring(1, 2), "O")
    test.assertEqual(a.substring(a.length - 1, a.length), "G")
    test.assertEqual(a.substring(0, 4), "SOME")
    test.assertEqual(a.substringBefore(4), "SOME")
    test.assertEqual(a.substring(4, 6), "TH")
    test.assertEqual(a.substring(4, 7), "THI")
    test.assertEqual(a.substring(4, 8), "THIN")
    test.assertEqual(a.substring(4, 9), "THING")
    test.assertEqual(a.substring(4, a.length), "THING")
    test.assertEqual(a.substringAfter(4), "THING")
}

function testSplit() {
    let a = "Hello my name is Foo"
    let split = a.split(" ")

    test.assertEqual(split.length, 5)
    test.assertEqual(split.get(0), "Hello")
    test.assertEqual(split.get(1), "my")
    test.assertEqual(split.get(2), "name")
    test.assertEqual(split.get(3), "is")
    test.assertEqual(split.get(4), "Foo")
    
    let a2 = "Hello   my   NAME   is   Foo"
    let split2 = a2.split("   ")

    test.assertEqual(split2.length, 5)
    test.assertEqual(split2.get(0), "Hello")
    test.assertEqual(split2.get(1), "my")
    test.assertEqual(split2.get(2), "NAME")
    test.assertEqual(split2.get(3), "is")
    test.assertEqual(split2.get(4), "Foo")

    let b = "aaabbbaaaaabbb"
    let split3 = b.split("bb")

    test.assertEqual(split3.length, 3)
    test.assertEqual(split3.get(0), "aaa")
    test.assertEqual(split3.get(1), "baaaaa")
    test.assertEqual(split3.get(2), "b")
}

function testTrim() {
    let a = "hello"
    let aTrim = a.trim()
    test.assertEqual(a, aTrim)
    test.assertEqual(aTrim, "hello")

    let b = " hello"
    let bTrim = b.trim()
    test.assertNotEqual(b, bTrim)
    test.assertEqual(bTrim, "hello")

    let c = " \r  \n SAY HELLO   To\nME  "
    let cTrim = c.trim()
    test.assertNotEqual(c, cTrim)
    test.assertEqual(cTrim, "SAY HELLO   To\nME")
}

function testStartsEndsWith() {
    let a = "hellogoodbye"
    test.assertTrue(a.startsWith("h"))
    test.assertTrue(a.startsWith("hello"))
    test.assertFalse(a.startsWith("ello"))
    test.assertTrue(a.startsWith("hellogoodbye"))
    test.assertFalse(a.startsWith("bye"))

    test.assertTrue(a.endsWith("e"))
    test.assertTrue(a.endsWith("bye"))
    test.assertTrue(a.endsWith("goodbye"))
    test.assertFalse(a.endsWith("goodby"))
    test.assertTrue(a.endsWith("hellogoodbye"))
    test.assertFalse(a.endsWith("hello"))
}
