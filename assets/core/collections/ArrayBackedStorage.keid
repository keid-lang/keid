namespace core::collections

public class ArrayBackedStorage<T: Default> {
    array: [T]

    public static empty<T: Default>(): ArrayBackedStorage<T> {
        return new ArrayBackedStorage<T> {
            array = new T[default(T); 0]
        }
    }

    public static withCapacity<T: Default>(capacity: usize): ArrayBackedStorage<T> {
        return new ArrayBackedStorage<T> {
            array = new T[default(T); capacity]
        }
    }
}

implement <T: Default> PositionalStorage<T> for ArrayBackedStorage<T> {
    getElement(index: usize): T => this.array[index]

    setElement(index: usize, value: T) {
        this.array[index] = value
    }

    ensureCapacity(capacity: usize) {
        if capacity > this.array.length {
            let newCapacity = this.array.length * 2 + 1
            while newCapacity < capacity {
                newCapacity *= 2
            }

            let newBuffer = new T[default(T); newCapacity]
            array.copy<T>(this.array, 0, newBuffer, 0, this.array.length)
            this.array = newBuffer
        }
    }

    public get capacity: usize => this.array.length
}
