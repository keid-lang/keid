namespace core::mem

import (
    core::runtime
    core::ops
)

public struct Pointer<T> {
    address: usize

    public static nullptr<T>(): Pointer<T> {
        return Pointer.to<T>(0)
    }

    public static to<T>(address: usize): Pointer<T> {
        return new Pointer<T> {
            address
        }
    }

    public static cast<A, B>(from: Pointer<A>): Pointer<B> {
        return new Pointer<B> {
            address = from.address
        }
    }

    /// Returns a pointer to the data fields of the underlying struct, skipping any class metadata.
    /// This is useful for passing a struct to C code when it is undesirable for the C code to be aware of the struct metadata field.
    public forStructInterop(): Pointer<T> {
        return new Pointer<T> {
            address = this.address + sizeof(usize)
        }
    }

    public offset(val: isize): Pointer<T> {
        return Pointer.to<T>(((this.address as isize) + val * (sizeof(T) as isize)) as usize)
    }

    public offset(val: usize): Pointer<T> {
        return Pointer.to<T>(this.address + val * sizeof(T))
    }

    public offsetBytes(bytes: isize): Pointer<T> {
        return Pointer.to<T>(((this.address as isize) + bytes) as usize)
    }

    public offsetBytes(bytes: usize): Pointer<T> {
        return Pointer.to<T>(this.address + bytes)
    }

    public get isNull: bool => this.address == 0
}

implement <T> Equals<Pointer<T>> for Pointer<T> {
    equals(other: Pointer<T>): bool => this.address == other.address
}

// Copies `sizeof(T) * count` bytes from `src` to `dst`.
public function copy<T>(src: Pointer<T>, dst: Pointer<T>, count: usize) {
    std::impl::mem.copy(Pointer.cast<T, void>(src), Pointer.cast<T, void>(dst), count * sizeof(T))
}

// Allocates `count` by of heap memory and returns the pointer to the allocated region.
public function allocBytes(count: usize): Pointer<void> {
    return std::impl::mem.alloc(count)
}

// Allocates `sizeof(T) * count` bytes of heap and returns the pointer to the allocated region.
public function alloc<T>(count: usize): Pointer<T> {
    return Pointer.cast<void, T>(std::impl::mem.alloc(count * sizeof(T)))
}

// Deallocates the heap memory at a pointer returned by `core::mem.alloc<T>`.
public function dealloc<T>(ptr: Pointer<T>) {
    std::impl::mem.dealloc(Pointer.cast<T, void>(ptr))
}

// Increases the reference count of an object by 1.
@ExternalFunction("keid.scope")
public extern function scope(ptr: Pointer<void>)

// Decreases the reference count of an object by 1.
@ExternalFunction("keid.unscope")
public extern function unscope(ptr: Pointer<void>)
