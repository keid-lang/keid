// This file defines the Keid syntax in Keid Syntax Definition Language (KSDL).
// The parser for this file can be found in `parser.keid`.
// See "syntax.def.README.md" for documentation regarding the format of this file.

ALIAS NewlineOrComma OR(REPEATED NEWLINE, OPERATOR COMMA)

RULE ArrayType
    OPERATOR [
    $elementType = ALIAS ValueType
    OPERATOR ;
    MOVE
    $length = LITERAL
    OPERATOR ]
END RULE

RULE SliceType
    OPERATOR [
    MOVE
    $elementType = ALIAS ValueType
    OPERATOR ]
END RULE

RULE NullableType
    OPERATOR ?
    MOVE
    $elementType = ALIAS ValueType
END RULE

RULE BasicType
    $path = OR(KEYWORD This, RULE QualifiedPath)
    MOVE
    $generics = OPTIONAL RULE GenericArgs
END RULE

RULE CompoundType
    $types = ALIAS NonCompoundValueType
    OPERATOR +
    $types = ALIAS NonCompoundValueType
    MOVE
    OPTIONAL REPEATED COMPOUND(OPERATOR +, $types = ALIAS NonCompoundValueType)
END RULE

ALIAS NonCompoundValueType OR(RULE ArrayType, RULE SliceType, RULE NullableType, RULE AnonymousTypeDecl, RULE BasicType)

ALIAS ValueType OR(RULE CompoundType, RULE ArrayType, RULE SliceType, RULE NullableType, RULE BasicType)

ALIAS Modifier OR(KEYWORD public, KEYWORD static, KEYWORD extern, KEYWORD unsafe, KEYWORD namespace, KEYWORD constructor, KEYWORD abstract, KEYWORD override)

RULE GenericDecl
    MOVE
    $name = IDENTIFIER
    OPTIONAL REPEATED COMPOUND(OPERATOR :, $constraints = ALIAS ValueType)
END RULE

RULE GenericDecls
    OPERATOR <
    $decls = RULE GenericDecl
    MOVE
    OPTIONAL REPEATED COMPOUND(OPERATOR COMMA, $decls = RULE GenericDecl)
    OPERATOR >
END RULE

RULE GenericArgs
    OPERATOR <
    $args = ALIAS ValueType
    OPTIONAL REPEATED COMPOUND(OPERATOR COMMA, $args = ALIAS ValueType)   
    OPERATOR >
END RULE

RULE AttributeArgs
    OPERATOR (
    MOVE
    OPTIONAL REPEATED COMPOUND($args = RULE Expr, OPERATOR COMMA)
    $args = OPTIONAL RULE Expr
    OPERATOR )
END RULE

RULE AttributeStatement
    OPERATOR @
    $name = RULE QualifiedPath
    $generics = OPTIONAL RULE GenericArgs
    $args = OPTIONAL RULE AttributeArgs
END RULE

ALIAS Attributes OPTIONAL REPEATED COMPOUND($attributes = RULE AttributeStatement, NEWLINE)

RULE FuncParamDecl
    OPTIONAL COMPOUND($this = KEYWORD this, OPERATOR .)
    $name = IDENTIFIER
    OPERATOR :
    $type = ALIAS ValueType
END RULE

RULE FuncVarargsDecl
    OPERATOR ...
    $param = RULE FuncParamDecl
END RULE

RULE FuncNativeVarargsDecl
    OPERATOR ...
END RULE

RULE FuncParamsDecl
    OPERATOR (
    MOVE
    OPTIONAL REPEATED NEWLINE
    OPTIONAL REPEATED COMPOUND($params = RULE FuncParamDecl, OPERATOR COMMA, OPTIONAL REPEATED NEWLINE)
    OPTIONAL OR($varargs = RULE FuncVarargsDecl, $params = RULE FuncParamDecl, $nativeVarargs = RULE FuncNativeVarargsDecl)
    OPTIONAL COMPOUND (OPERATOR COMMA, REPEATED NEWLINE)
    OPERATOR )
END RULE

RULE MethodDecl
    ALIAS Attributes
    $modifiers = OPTIONAL REPEATED ALIAS Modifier
    $name = IDENTIFIER
    $generics = OPTIONAL RULE GenericDecls
    $params = RULE FuncParamsDecl
    MOVE
    OPTIONAL COMPOUND(OPERATOR :, $returnType = ALIAS ValueType)
    $body = OPTIONAL OR(RULE CodeBlock, RULE ArrowBlock)
    NEWLINE
END RULE

RULE FunctionDecl
    ALIAS Attributes
    $modifiers = OPTIONAL REPEATED ALIAS Modifier
    KEYWORD function
    MOVE
    $name = IDENTIFIER
    $generics = OPTIONAL RULE GenericDecls
    $params = RULE FuncParamsDecl
    OPTIONAL COMPOUND(OPERATOR :, $returnType = ALIAS ValueType)
    $body = OPTIONAL OR(RULE CodeBlock, RULE ArrowBlock)
    NEWLINE
END RULE

RULE DestructorDecl
    KEYWORD destructor
    MOVE
    $body = OR(RULE CodeBlock, RULE ArrowBlock)
    NEWLINE
END RULE

RULE GetAccessorDecl
    $modifiers = OPTIONAL REPEATED ALIAS Modifier
    KEYWORD get
    MOVE
    $name = IDENTIFIER
    OPERATOR :
    $type = ALIAS ValueType
    $body = OPTIONAL OR(RULE CodeBlock, RULE ArrowBlock)
    NEWLINE
END RULE

RULE SetAccessorDecl
    $modifiers = OPTIONAL REPEATED ALIAS Modifier
    KEYWORD set
    MOVE
    $name = IDENTIFIER
    OPERATOR :
    $type = ALIAS ValueType
    $body = OPTIONAL OR(RULE CodeBlock, RULE ArrowBlock)
    NEWLINE
END RULE

ALIAS AccessorDecl OR(RULE GetAccessorDecl, RULE SetAccessorDecl)

RULE NewEnumExpr
    $enum = RULE QualifiedPath
    KEYWORD with
    MOVE
    $fields = RULE FieldSet
END RULE

RULE FuncCallExpr
    $callee = OR(RULE GroupingExpr, IDENTIFIER, KEYWORD this, KEYWORD super, KEYWORD sizeof)
    $generics = OPTIONAL RULE GenericArgs
    OPERATOR (
    MOVE
    OPTIONAL REPEATED NEWLINE
    OPTIONAL REPEATED COMPOUND($params = RULE Expr, OPERATOR COMMA, OPTIONAL REPEATED NEWLINE)
    $params = OPTIONAL RULE Expr
    OPTIONAL ALIAS NewlineOrComma
    OPERATOR )
    $fields = OPTIONAL RULE FieldSet
END RULE

RULE GroupingExpr
    OPERATOR (
    $expr = RULE Expr
    OPERATOR )
END RULE

RULE MatchTestEnumWithData
    $variant = IDENTIFIER
    $data = RULE DeconstructionExpr
END RULE

RULE MatchArm
    $test = OR(OPERATOR _, RULE MatchTestEnumWithData, LITERAL, IDENTIFIER)
    MOVE
    OPERATOR =>
    $statement = ALIAS BlockStatement
END RULE

RULE MatchExpr
    KEYWORD match
    MOVE
    $operand = RULE Expr
    OPERATOR {
    REPEATED NEWLINE
    OPTIONAL REPEATED COMPOUND($arms = RULE MatchArm)
    OPERATOR }
END RULE

RULE NewSliceExpr
    $type = RULE SliceType
    OPERATOR (
    MOVE
    $initialValue = RULE Expr
    OPERATOR ;
    $length = RULE Expr
    OPERATOR )
END RULE

RULE NewArrayExpr
    $type = RULE ArrayType
    OPERATOR (
    MOVE
    $initialValue = RULE Expr
    OPTIONAL COMPOUND(OPERATOR ;, $length = LITERAL)
    OPERATOR )
END RULE

RULE ConstSliceExpr
    $type = RULE SliceType
    OPERATOR {
    MOVE
    OPTIONAL REPEATED COMPOUND($elements = RULE Expr, ALIAS NewlineOrComma)
    OPTIONAL COMPOUND($elements = RULE Expr, OPTIONAL ALIAS NewlineOrComma)
    OPERATOR }
END RULE

RULE DerefExpr
    KEYWORD deref
    $pointer = RULE Expr
END RULE

RULE LetVariableDecl
    $name = IDENTIFIER
    OPTIONAL COMPOUND(OPERATOR =, $initialValue = RULE Expr)
END RULE

RULE InlineLetStatement
    $modifiers = OPTIONAL REPEATED ALIAS Modifier
    $kind = OR(KEYWORD let, KEYWORD const)
    MOVE
    $name = IDENTIFIER
    OPTIONAL COMPOUND(OPERATOR :, $type = ALIAS ValueType)
    OPTIONAL COMPOUND(OPERATOR =, $initialValue = RULE Expr)
    OPTIONAL REPEATED COMPOUND(OPERATOR COMMA, $secondaries = RULE LetVariableDecl)
END RULE

RULE LetStatement
    $let = RULE InlineLetStatement
    MOVE
    NEWLINE
END RULE

RULE ReturnStatement
    KEYWORD return
    MOVE
    $operand = OPTIONAL RULE Expr
    NEWLINE
END RULE

RULE IfStatement
    KEYWORD if
    MOVE
    $tests = RULE Expr
    $conditionalBlocks = RULE CodeBlock
    OPTIONAL REPEATED COMPOUND(KEYWORD else, KEYWORD if, $tests = RULE Expr, $conditionalBlocks = RULE CodeBlock)
    OPTIONAL COMPOUND(KEYWORD else, $fallback = RULE CodeBlock)
    NEWLINE
END RULE

RULE ForLoop
    KEYWORD for
    $condition = RULE Expr
    $block = RULE CodeBlock
    NEWLINE
END RULE

RULE ForEachLoop
    KEYWORD for
    $elementName = IDENTIFIER
    KEYWORD in
    MOVE
    $iterable = RULE Expr
    $block = RULE CodeBlock
    NEWLINE
END RULE

RULE IndefiniteLoop
    KEYWORD for
    $block = RULE CodeBlock
    NEWLINE
END RULE

ALIAS SelfOperator OR(OPERATOR =, OPERATOR +=, OPERATOR -=, OPERATOR *=, OPERATOR /=, OPERATOR %=)

RULE AssignStatement
    $deref = OPTIONAL OPERATOR deref
    $lhs = RULE Expr
    $op = ALIAS SelfOperator
    MOVE
    $rhs = RULE Expr
    NEWLINE
END RULE

RULE ThrowStatement
    KEYWORD throw
    MOVE
    $error = RULE Expr
    NEWLINE
END RULE

RULE WithStatement
    KEYWORD with
    MOVE
    $binding = RULE InlineLetStatement
    $block = RULE CodeBlock
END RULE

RULE ExprStatement
    $expr = RULE Expr
    MOVE
    NEWLINE
END RULE

ALIAS BlockStatement OR(RULE WithStatement, RULE ThrowStatement, RULE ReturnStatement, RULE LetStatement, RULE IfStatement, RULE ForEachLoop, RULE ForLoop, RULE IndefiniteLoop, RULE UnsafeBlock, RULE AssignStatement, RULE ExprStatement)

RULE CodeBlock
    OPERATOR {
    MOVE
    OPTIONAL REPEATED OR(NEWLINE, $statements = ALIAS BlockStatement)
    OPERATOR }
END RULE

RULE ArrowBlock
    OPERATOR =>
    MOVE
    $expr = RULE Expr
END RULE

RULE UnsafeBlock
    KEYWORD unsafe
    $inner = RULE CodeBlock
    NEWLINE
END RULE

RULE PrefixOperator
    $op = OR(OPERATOR not, OPERATOR ref, OPERATOR deref, OPERATOR ...)
END RULE

RULE InfixOperator
    $op = OR(OPERATOR ., OPERATOR ==, OPERATOR !=, OPERATOR +, OPERATOR -, OPERATOR *, OPERATOR /, OPERATOR %, OPERATOR |, OPERATOR ^, OPERATOR &, RULE LeftShift, RULE RightShift, OPERATOR or, OPERATOR and, OPERATOR <=, OPERATOR >=, OPERATOR <, OPERATOR >, OPERATOR ??)
END RULE

RULE LeftShift
    OPERATOR <
    OPERATOR <
END RULE

RULE RightShift
    OPERATOR >
    OPERATOR >
END RULE

RULE PostfixOperator
    $op = OR(RULE OpIndex, RULE OpAs, OPERATOR !)
END RULE

RULE OpIndex
    OPERATOR [
    MOVE
    $index = OR(RULE OpSlice, RULE Expr)
    OPERATOR ]
END RULE

RULE OpSlice
    $start = OPTIONAL RULE Expr
    OPERATOR :
    $end = OPTIONAL RULE Expr
END RULE

RULE OpAs
    OPERATOR as
    MOVE
    $type = ALIAS ValueType
END RULE

ALIAS ExprOperand OR(RULE FuncCallExpr, RULE GroupingExpr, RULE NewEnumExpr, RULE MatchExpr, RULE NewArrayExpr, RULE NewSliceExpr, RULE ConstSliceExpr, RULE DerefExpr, KEYWORD this, KEYWORD super, LITERAL, IDENTIFIER)

ALIAS InfixOperatorNewline COMPOUND($parts = RULE InfixOperator, OPTIONAL REPEATED NEWLINE)

RULE Expr
    $parts = OPTIONAL REPEATED RULE PrefixOperator
    $parts = ALIAS ExprOperand
    MOVE
    $parts = OPTIONAL REPEATED RULE PostfixOperator
    OPTIONAL REPEATED COMPOUND(ALIAS InfixOperatorNewline, $parts = OPTIONAL REPEATED RULE PrefixOperator, $parts = ALIAS ExprOperand, $parts = OPTIONAL REPEATED RULE PostfixOperator)
END RULE

RULE FieldDecl
    $modifiers = OPTIONAL REPEATED ALIAS Modifier
    $name = IDENTIFIER
    OPERATOR :
    MOVE
    $type = ALIAS ValueType
    OPTIONAL COMPOUND(OPERATOR =, $initialValue = RULE Expr)
    NEWLINE
END RULE

RULE AssociatedTypeDecl
    KEYWORD type
    MOVE
    $name = IDENTIFIER
    OPTIONAL COMPOUND(OPERATOR =, $aliasee = ALIAS ValueType)
    NEWLINE
END RULE

ALIAS ClassBodyStatement OR(RULE AssociatedTypeDecl, RULE DestructorDecl, ALIAS AccessorDecl, RULE MethodDecl, RULE FieldDecl)

ALIAS ClassDeclKind OR(KEYWORD class, KEYWORD struct, KEYWORD interface)

RULE ClassExtends
    KEYWORD extends
    MOVE
    $superclass = RULE QualifiedPath
    $generics = OPTIONAL RULE GenericArgs
END RULE

RULE ClassDecl
    $modifiers = OPTIONAL REPEATED ALIAS Modifier
    $kind = ALIAS ClassDeclKind
    MOVE
    $name = IDENTIFIER
    $generics = OPTIONAL RULE GenericDecls
    $extends = OPTIONAL RULE ClassExtends
    OPERATOR {
    OPTIONAL REPEATED OR($statements = ALIAS ClassBodyStatement, NEWLINE)
    OPERATOR }
    NEWLINE
END RULE

RULE EnumDecl
    $modifiers = OPTIONAL REPEATED ALIAS Modifier
    $kind = KEYWORD enum
    MOVE
    $name = IDENTIFIER
    $generics = OPTIONAL RULE GenericDecls
    OPERATOR {
    REPEATED NEWLINE
    OPTIONAL REPEATED OR($members = RULE EnumMemberStatement, NEWLINE)
    OPTIONAL REPEATED OR($statements = ALIAS ClassBodyStatement, NEWLINE)
    OPERATOR }
    NEWLINE
END RULE

RULE AnonymousTypeDeclField
    $name = IDENTIFIER
    OPERATOR :
    $type = ALIAS ValueType
END RULE

RULE AnonymousTypeDecl
    OPERATOR {
    OPTIONAL REPEATED NEWLINE
    OPTIONAL REPEATED COMPOUND($fields = RULE AnonymousTypeDeclField, ALIAS NewlineOrComma)
    COMPOUND($fields = RULE AnonymousTypeDeclField, OPTIONAL ALIAS NewlineOrComma)
    OPERATOR }
END RULE

RULE AnonymousTypeField
    $name = IDENTIFIER
    OPTIONAL COMPOUND(OPERATOR =, $value = RULE Expr)
END RULE

RULE AnonymousType
    OPERATOR {
    OPTIONAL REPEATED NEWLINE
    OPTIONAL REPEATED COMPOUND($fields = RULE AnonymousTypeField, ALIAS NewlineOrComma)
    COMPOUND($fields = RULE AnonymousTypeField, OPTIONAL ALIAS NewlineOrComma)
    OPERATOR }
END RULE

RULE DeconstructionExprField
    $name = IDENTIFIER
    OPTIONAL COMPOUND(KEYWORD as, $alias = IDENTIFIER)
    OPTIONAL COMPOUND(OPERATOR :, $type = ALIAS ValueType)
END RULE

ALIAS EllipsisOrDeconstructionExprField OR(OPERATOR ..., RULE DeconstructionExprField)

RULE DeconstructionExpr
    OPERATOR {
    OPTIONAL REPEATED COMPOUND($members = RULE DeconstructionExprField, ALIAS NewlineOrComma)
    COMPOUND($members = ALIAS EllipsisOrDeconstructionExprField, OPTIONAL ALIAS NewlineOrComma)
    OPERATOR }
END RULE

RULE FieldSetField
    $name = IDENTIFIER
    OPTIONAL COMPOUND(OPERATOR =, $value = RULE Expr)
END RULE

RULE FieldSet
    OPERATOR {
    OPTIONAL REPEATED NEWLINE
    COMPOUND(OPERATOR ., MOVE, $fields = RULE FieldSetField, ALIAS NewlineOrComma)
    OPTIONAL REPEATED COMPOUND(OPERATOR ., $fields = RULE FieldSetField, ALIAS NewlineOrComma)
    OPERATOR }
END RULE

RULE EnumMemberStatement
    $name = IDENTIFIER
    $data = OPTIONAL RULE AnonymousTypeDecl
    NEWLINE
END RULE

RULE ImplementDecl
    KEYWORD implement
    MOVE
    $generics = OPTIONAL RULE GenericDecls
    $interface = RULE QualifiedPath
    $interfaceGenerics = OPTIONAL RULE GenericArgs
    KEYWORD for
    $target = RULE QualifiedPath
    $targetGenerics = OPTIONAL RULE GenericArgs
    OPERATOR {
    REPEATED NEWLINE
    OPTIONAL REPEATED OR($statements = ALIAS ClassBodyStatement, NEWLINE)
    OPERATOR }
    NEWLINE
END RULE

RULE QualifiedPath
    $path = IDENTIFIER
    OPTIONAL REPEATED COMPOUND(OPERATOR ., $path = IDENTIFIER)
END RULE

RULE NamespaceStatement
    KEYWORD namespace
    MOVE
    $namespace = RULE QualifiedPath
END RULE

RULE ImportStatement
    KEYWORD import
    MOVE
    OPERATOR (
    REPEATED NEWLINE
    $namespaces = RULE QualifiedPath
    OPTIONAL REPEATED COMPOUND(REPEATED NEWLINE, $namespaces = RULE QualifiedPath)
    OPTIONAL REPEATED NEWLINE
    OPERATOR )
    NEWLINE
END RULE

ALIAS RootStatement OR(RULE ImportStatement, RULE LetStatement, RULE ClassDecl, RULE EnumDecl, RULE ImplementDecl, RULE FunctionDecl)

RULE Program
    MOVE
    OPTIONAL REPEATED NEWLINE
    $namespace = RULE NamespaceStatement
    REPEATED NEWLINE
    OPTIONAL REPEATED OR(NEWLINE, $statements = ALIAS RootStatement)
END RULE
