// This file defines the Keid syntax in Keid Syntax Definition Language (KSDL).
// The parser for this file can be found in `parser.keid`.
// See "syntax.def.README.md" for documentation regarding the format of this file.

ALIAS NewlineOrComma OR(REPEATED LITERAL NEWLINE, LITERAL COMMA)

RULE HexInteger CONTIGUOUS
    LITERAL 0x
    MOVE
    REPEATED OR(RANGE 0-9, RANGE a-f, RANGE A-F)
END RULE

RULE DecimalInteger CONTIGUOUS
    COMPOUND(RANGE 1-9, OPTIONAL REPEATED RANGE 0-9)
END RULE

RULE ZeroInteger CONTIGUOUS
    LITERAL 0
END RULE

RULE Integer CONTIGUOUS
    $sign = OPTIONAL OR(LITERAL +, LITERAL -)
    $value = OR(RULE HexInteger, RULE DecimalInteger, RULE ZeroInteger)
END RULE

RULE String
    LITERAL "
    UNTIL LITERAL "
END RULE

RULE Char
    LITERAL '
    UNTIL LITERAL '
END RULE

RULE Bool
    OR(LITERAL true, LITERAL false)
END RULE

RULE Null
    LITERAL null
END RULE

RULE Identifier CONTIGUOUS
    OR(RANGE A-Z, RANGE a-z, LITERAL _)
    OPTIONAL REPEATED OR(RANGE A-Z, RANGE a-z, LITERAL _, RANGE 0-9)
END RULE

RULE ArrayType
    LITERAL [
    $elementType = ALIAS ValueType
    LITERAL ]
END RULE

RULE NullableType
    LITERAL ?
    $elementType = ALIAS ValueType
END RULE

RULE BasicType
    $path = RULE QualifiedPath
    $generics = OPTIONAL RULE GenericArgs
END RULE

ALIAS ValueType OR(RULE ArrayType, RULE NullableType, RULE BasicType)

RULE Modifier
    OR(LITERAL public, LITERAL static, LITERAL extern)
END RULE

RULE GenericDecl
    $name = RULE Identifier
END RULE

RULE GenericDecls
    LITERAL <
    MOVE
    $decls = RULE GenericDecl
    OPTIONAL REPEATED COMPOUND(LITERAL COMMA, $decls = RULE GenericDecl)
    LITERAL >
END RULE

RULE GenericArgs
    LITERAL <
    MOVE
    $args = ALIAS ValueType
    OPTIONAL REPEATED COMPOUND(LITERAL COMMA, $args = ALIAS ValueType)   
    LITERAL >
END RULE

RULE AttributeArgs
    LITERAL (
    OPTIONAL REPEATED COMPOUND($args = ALIAS ConstExpr, LITERAL COMMA)
    $args = OPTIONAL ALIAS ConstExpr
    LITERAL )
END RULE

RULE AttributeStatement
    LITERAL @
    $name = RULE QualifiedPath
    $generics = OPTIONAL RULE GenericArgs
    $args = OPTIONAL RULE AttributeArgs
END RULE

ALIAS Attributes OPTIONAL REPEATED COMPOUND($attributes = RULE AttributeStatement, LITERAL NEWLINE)

RULE FuncParamDecl
    $name = RULE Identifier
    LITERAL :
    $type = ALIAS ValueType
END RULE

RULE FuncVarargsDecl
    LITERAL ...
    $param = RULE FuncParamDecl
END RULE

RULE FuncNativeVarargsDecl
    LITERAL ...
END RULE

RULE FuncParamsDecl
    LITERAL (
    MOVE
    OPTIONAL REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($params = RULE FuncParamDecl, LITERAL COMMA, OPTIONAL REPEATED LITERAL NEWLINE)
    OPTIONAL OR($varargs = RULE FuncVarargsDecl, $params = RULE FuncParamDecl, $nativeVarargs = RULE FuncNativeVarargsDecl)
    OPTIONAL LITERAL COMMA
    OPTIONAL REPEATED LITERAL NEWLINE
    LITERAL )
END RULE

RULE MethodDecl
    ALIAS Attributes
    $modifiers = OPTIONAL REPEATED RULE Modifier
    $name = RULE Identifier
    $generics = OPTIONAL RULE GenericDecls
    $params = RULE FuncParamsDecl
    MOVE
    OPTIONAL COMPOUND(LITERAL :, $returnType = ALIAS ValueType)
    $body = OR(RULE CodeBlock, RULE ArrowBlock)
END RULE

RULE FunctionDecl
    ALIAS Attributes
    $modifiers = OPTIONAL REPEATED RULE Modifier
    LITERAL function
    MOVE
    $name = RULE Identifier
    $generics = OPTIONAL RULE GenericDecls
    $params = RULE FuncParamsDecl
    MOVE
    OPTIONAL COMPOUND(LITERAL :, $returnType = ALIAS ValueType)
    $body = OR(RULE CodeBlock, RULE ArrowBlock)
END RULE

RULE ConstructorDecl
    LITERAL constructor
    MOVE
    $body = OR(RULE CodeBlock, RULE ArrowBlock)
END RULE

RULE DestructorDecl
    LITERAL destructor
    MOVE
    $body = OR(RULE CodeBlock, RULE ArrowBlock)
END RULE

RULE GetAccessorDecl
    $modifiers = OPTIONAL REPEATED RULE Modifier
    LITERAL get
    MOVE
    $name = RULE Identifier
    LITERAL :
    $type = ALIAS ValueType
    $body = OR(RULE CodeBlock, RULE ArrowBlock)
END RULE

RULE SetAccessorDecl
    $modifiers = OPTIONAL REPEATED RULE Modifier
    LITERAL set
    MOVE
    $name = RULE Identifier
    LITERAL :
    $type = ALIAS ValueType
    $body = OR(RULE CodeBlock, RULE ArrowBlock)
END RULE

ALIAS AccessorDecl OR(RULE GetAccessorDecl, RULE SetAccessorDecl)

RULE FuncCallExpr
    $callee = OR(RULE GroupingExpr, RULE Identifier)
    $generics = OPTIONAL RULE GenericArgs
    LITERAL (
    MOVE
    OPTIONAL REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($params = RULE Expr, ALIAS NewlineOrComma)
    $params = OPTIONAL RULE Expr
    OPTIONAL ALIAS NewlineOrComma
    LITERAL )
END RULE

RULE GroupingExpr
    LITERAL (
    $expr = RULE Expr
    LITERAL )
END RULE

RULE MatchExprArm
    $test = RULE Expr
    LITERAL =>
    $statement = ALIAS BlockStatement
END RULE

RULE MatchExpr
    LITERAL match
    MOVE
    $matchee = RULE Expr
    LITERAL {
    REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($arms = RULE MatchExprArm, REPEATED LITERAL NEWLINE)
    LITERAL }
END RULE

RULE NewExpr
    LITERAL new
    MOVE
    $type = RULE QualifiedPath
    $fields = RULE FieldSet
END RULE

ALIAS ExprOperand OR(RULE FuncCallExpr, RULE GroupingExpr, RULE MatchExpr, RULE NewExpr, RULE Null, RULE Bool, RULE Integer, RULE Char, RULE String, RULE ExplicitQualifiedPath, RULE Identifier)

RULE LetStatementMode
    OR(LITERAL let, LITERAL const)
END RULE

RULE LetStatement
    $modifiers = OPTIONAL REPEATED RULE Modifier
    $mode = RULE LetStatementMode
    MOVE
    $name = RULE Identifier
    OPTIONAL COMPOUND(LITERAL :, $type = ALIAS ValueType)
    OPTIONAL COMPOUND(LITERAL =, $initialValue = RULE Expr)
END RULE

RULE ReturnStatement
    LITERAL return
    MOVE
    $operand = RULE Expr
END RULE

RULE IfStatement
    LITERAL if
    MOVE
    $tests = RULE Expr
    $conditionalBlocks = RULE CodeBlock
    OPTIONAL REPEATED COMPOUND(LITERAL else, LITERAL if, $tests = RULE Expr, $conditionalBlocks = RULE CodeBlock)
    OPTIONAL COMPOUND(LITERAL else, $fallback = RULE CodeBlock)
END RULE

RULE ForLoop
    LITERAL for
    MOVE
    $elementName = RULE Identifier
    LITERAL in
    $iterable = RULE Expr
    $block = RULE CodeBlock
END RULE

// ALIAS BlockStatement OR(RULE TryStatement, RULE BreakStatement, RULE ContinueStatement, RULE WhileLoop, RULE IndefiniteLoop, RULE UnsafeBlock, RULE FixedBlock, RULE CodeBlock, RULE AssignStatement, RULE ImportStatement, RULE LetStatement, RULE ReturnStatement, RULE UnreachableStatement, RULE ThrowStatement, RULE Expr)
ALIAS BlockStatement OR(RULE ReturnStatement, RULE LetStatement, RULE IfStatement, RULE ForLoop, RULE Expr)

RULE LineComment
    LITERAL //
    UNTIL LITERAL NEWLINE
END RULE

ALIAS NewlineOrComment OR(LITERAL NEWLINE, RULE LineComment)

RULE CodeBlock
    LITERAL {
    MOVE
    REPEATED LITERAL NEWLINE
    REPEATED COMPOUND($statements = ALIAS BlockStatement, REPEATED ALIAS NewlineOrComment)
    LITERAL }
END RULE

RULE ArrowBlock
    LITERAL =>
    MOVE
    $expr = RULE Expr
END RULE

RULE PrefixOperator
    OR(LITERAL !, LITERAL ...)
END RULE

RULE InfixOperator
    OR(LITERAL ., LITERAL ==, LITERAL !=, LITERAL +, LITERAL -, LITERAL *, LITERAL /, LITERAL %, LITERAL <<, LITERAL >>, LITERAL or, LITERAL and, LITERAL <=, LITERAL >=, LITERAL <, LITERAL >, LITERAL ??)
END RULE

RULE OpNullAssert CONTIGUOUS
    LITERAL !
END RULE

RULE PostfixOperator
    OR(RULE OpNullAssert)
END RULE

RULE Expr
    $parts = OPTIONAL REPEATED RULE PrefixOperator
    $parts = ALIAS ExprOperand
    $parts = OPTIONAL REPEATED RULE PostfixOperator
    OPTIONAL REPEATED COMPOUND($parts = RULE InfixOperator, $parts = OPTIONAL REPEATED RULE PrefixOperator, $parts = ALIAS ExprOperand, $parts = OPTIONAL REPEATED RULE PostfixOperator)
END RULE

ALIAS ConstExpr OR(RULE Null, RULE Bool, RULE Integer, RULE Char, RULE String)

RULE FieldDecl
    $modifiers = OPTIONAL REPEATED RULE Modifier
    $name = RULE Identifier
    LITERAL :
    MOVE
    $type = ALIAS ValueType
    OPTIONAL COMPOUND(LITERAL =, $initialValue = RULE Expr)
END RULE

ALIAS ClassBodyStatement OR(RULE ConstructorDecl, RULE DestructorDecl, ALIAS AccessorDecl, RULE FieldDecl, RULE MethodDecl)

RULE ClassDeclType
    OR(LITERAL class, LITERAL struct, LITERAL interface)
END RULE

RULE ClassDeclTypeEnum
    LITERAL enum
END RULE

RULE ClassExtends
    LITERAL extends
    MOVE
    $superclass = RULE QualifiedPath
    $generics = OPTIONAL RULE GenericArgs
END RULE

RULE ClassDecl
    $modifiers = OPTIONAL REPEATED RULE Modifier
    $type = RULE ClassDeclType
    MOVE
    $name = RULE Identifier
    $generics = OPTIONAL RULE GenericDecls
    $extends = OPTIONAL RULE ClassExtends
    LITERAL {
    REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($statements = ALIAS ClassBodyStatement, REPEATED LITERAL NEWLINE)
    LITERAL }
END RULE

RULE EnumDecl
    $modifiers = OPTIONAL REPEATED RULE Modifier
    $type = RULE ClassDeclTypeEnum
    MOVE
    $name = RULE Identifier
    $generics = OPTIONAL RULE GenericDecls
    LITERAL {
    REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($members = RULE EnumMemberStatement, REPEATED LITERAL NEWLINE)
    OPTIONAL REPEATED COMPOUND($statements = ALIAS ClassBodyStatement, REPEATED LITERAL NEWLINE)
    LITERAL }
END RULE

RULE AnonymousTypeField
    $name = RULE Identifier
    LITERAL :
    $type = ALIAS ValueType
END RULE

RULE AnonymousType
    LITERAL {
    MOVE
    OPTIONAL REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($fields = RULE AnonymousTypeField, ALIAS NewlineOrComma)
    LITERAL }
END RULE

RULE FieldSetField
    $name = RULE Identifier
    OPTIONAL COMPOUND(LITERAL =, $value = RULE Expr)
END RULE

RULE FieldSet
    LITERAL {
    MOVE
    OPTIONAL REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($fields = RULE FieldSetField, ALIAS NewlineOrComma)
    LITERAL }
END RULE

RULE EnumMemberStatement
    $name = RULE Identifier
    $data = OPTIONAL RULE AnonymousType
END RULE

RULE ImplementDecl
    LITERAL implement
    MOVE
    $generics = OPTIONAL RULE GenericDecls
    $interface = RULE Identifier
    $interfaceGenerics = OPTIONAL RULE GenericArgs
    LITERAL for
    $target = RULE Identifier
    $targetGenerics = OPTIONAL RULE GenericArgs
    LITERAL {
    REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($statements = ALIAS ClassBodyStatement, REPEATED LITERAL NEWLINE)
    LITERAL }
END RULE

RULE QualifiedPath
    RULE Identifier
    OPTIONAL REPEATED COMPOUND(LITERAL ::, RULE Identifier)
END RULE

RULE ExplicitQualifiedPath
    RULE Identifier
    LITERAL ::
    RULE Identifier
    OPTIONAL REPEATED COMPOUND(LITERAL ::, RULE Identifier)
END RULE

RULE NamespaceStatement
    LITERAL namespace
    MOVE
    $namespace = RULE QualifiedPath
END RULE

RULE ImportStatement
    LITERAL import
    MOVE
    LITERAL (
    REPEATED LITERAL NEWLINE
    $modules = RULE QualifiedPath
    OPTIONAL REPEATED COMPOUND(REPEATED LITERAL NEWLINE, $modules = RULE QualifiedPath)
    LITERAL )
END RULE

ALIAS RootStatement OR(RULE ImportStatement, RULE ClassDecl, RULE EnumDecl, RULE ImplementDecl, RULE FunctionDecl)

RULE Program
    MOVE
    OPTIONAL REPEATED LITERAL NEWLINE
    $namespace = RULE NamespaceStatement
    OPTIONAL REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($statements = ALIAS RootStatement, REPEATED LITERAL NEWLINE)
END RULE
