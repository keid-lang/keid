namespace keidc::ksdl

import (
    core::collections
    core::object
)

public class RuleState {
    moved: bool
    skipWhitespace: bool
    groups: List<RuleMatchGroup>
}

public enum RuleResult {
    Success {
        match: RuleMatch
    }
    SoftFail
    HardFail {
        rule: Rule
        statement: ParserStatement
        result: StatementResult
    }
}

public class Rule {
    name: string
    statements: List<ParserStatement>
    isContiguous: bool

    public parse(reader: TokenReader): RuleResult {
        let state = new RuleState {
            moved = false
            groups = List.empty<RuleMatchGroup>()
        }

        reader.isSkipWhitespace = !this.isContiguous
        reader.skipWhitespace()

        let start = reader.cursor
        for statement in this.statements {
            reader.currentRule = this
            reader.skipWhitespace()
            reader.isSkipWhitespace = !this.isContiguous
            
            let result = statement.execute(reader, state)
            match result {
                Failure => {
                    if state.moved {
                        std::io.println("HardFail: ", this.name)
                        return new RuleResult.HardFail {
                            rule = this
                            statement
                            result
                        }
                    }
                    return RuleResult.SoftFail
                }
                ImmediateFailure { rule, statement, result, } => return new RuleResult.HardFail { rule, statement, result, }
                _ => {}
            }
        }

        let length = reader.cursor - start
        return new RuleResult.Success {
            match = new RuleMatch {
                rule = this.name
                token = new TokenLocation {
                    start
                    length
                }
                groups = state.groups
            }
        }
    }
}
