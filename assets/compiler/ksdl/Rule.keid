namespace keidc::ksdl

import (
    core::collections
    core::object
)

public enum ParserMatch {
    Rule {
        rule: RuleMatch
    }
    Token {
        token: LexerToken
    }

    public rule(): RuleMatch {
        match this {
            Rule { rule, } => return rule
            _ => throw Error.create("illegal call to rule() on Token variant of ParserMatch")
        }
    }

    public token(): LexerToken {
        match this {
            Token { token, } => return token
            _ => throw Error.create("illegal call to token() on Rule variant of ParserMatch")
        }
    }
}

public class RuleState {
    moved: bool
    groups: List<RuleMatchGroup>
}

public enum RuleResult {
    Success {
        match: ParserMatch
    }
    SoftFail
    HardFail {
        rule: Rule
        statement: ParserStatement
        result: StatementResult
    }
}

public class Rule {
    name: string
    statements: List<ParserStatement>

    public parse(stream: TokenStream): RuleResult {
        let state = new RuleState {
            moved = false
            groups = List.empty<RuleMatchGroup>()
        }

        let start = stream.currentToken.loc.start
        for statement in this.statements {
            stream.currentRule = this     
            
            let result = statement.execute(stream, state)
            match result {
                Failure => {
                    if state.moved {
                        std::io.println("HardFail: ", this.name)
                        return new RuleResult.HardFail {
                            rule = this
                            statement
                            result
                        }
                    }
                    return RuleResult.SoftFail
                }
                ImmediateFailure { rule, statement, result, } => return new RuleResult.HardFail { rule, statement, result, }
                _ => {}
            }
        }

        return new RuleResult.Success {
            match = new ParserMatch.Rule {
                rule = new RuleMatch {
                    rule = this.name
                    token = new TokenLocation {
                        start
                        length = stream.currentToken.loc.start - start
                    }
                    groups = state.groups
                }
            }
        }
    }
}
