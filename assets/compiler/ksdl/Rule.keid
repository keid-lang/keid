namespace keidc::ksdl

import (
    core::collections
)

public class RuleState {
    moved: bool
    skipWhitespace: bool
    groups: List<RuleMatchGroup>
}

public enum RuleResult {
    Success {
        data: RuleMatch
    }
    SoftFail
    HardFail
}

public class Rule {
    name: string
    statements: List<ParserStatement>

    public parse(text: string): RuleResult {
        let reader = TokenReader.create(text)
        return this.parse(reader)
    }

    public parse(reader: TokenReader): RuleResult {
        let state = new RuleState {
            moved = false
            skipWhitespace = true
            groups = List.empty<RuleMatchGroup>()
        }

        if state.skipWhitespace {
            while reader.currentCharacter == ' ' {
                reader.advance(1)
            }
        }
        let start = reader.cursor
        for statement in this.statements {
            if state.skipWhitespace {
                while reader.currentCharacter == ' ' {
                    reader.advance(1)
                }
            }
            std::io.println("executing ", this.name, " on: '", reader.currentText, "'")
            let result = statement.execute(reader, state)
            match result {
                Failure => {
                    if state.moved {
                        std::io.println("Hard failed parsing rule ", this.name)
                        return RuleResult.HardFail
                    }
                    std::io.println("Soft failed parsing rule ", this.name)
                    return RuleResult.SoftFail
                }
                _ => {}
            }
        }

        let length = reader.cursor - start
        return new RuleResult.Success {
            data = new RuleMatch {
                rule = this.name
                token = new Token {
                    start
                    length
                }
                groups = state.groups
            }
        }
    }
}
