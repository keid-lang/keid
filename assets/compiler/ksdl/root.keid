namespace keidc::ksdl

import (
    core::collections
    core::error
)

public enum RuleResult {
    Success {
        data: ParsedRule
    }
    SoftFail
    HardFail
}

public enum StatementResult {
    /// Returned by statements when they match with a token result.
    Match {
        data: ParsedRule
    }
    /// Returned by statements which don't perform matching operations, e.g. `move`.
    /// A matchless result is always considered successful.
    Matchless
    /// Returned by statements when they attempt to match a token and fail.
    Failure
}

public class Parser {
    rules: List<Rule>

    public static fromKsdl(ksdl: string): Parser {
        let rules = parseKsdl(ksdl)
        return new Parser {
            rules
        }
    }

    getRule(name: string): Rule {
        for rule in this.rules {
            if rule.name == name {
                return rule
            }
        }

        throw Error.create(string.format("no such rule: ", name))
    }

    /// Parses the given `text` using the specified `ruleName`.
    public parse(ruleName: string, text: string): RuleResult {
        let rule = this.getRule(ruleName)
        let reader = new TokenReader {
            sourceText = text
            currentText = text
            cursor = 0
        }
        return rule.parse(reader)
    }
}

public class Token {
    /// The index of the first character of the token, relative to the start of the entire program input.
    start: usize
    /// The length of the matched token.
    length: usize

    getText(program: string): string {
        return program.substring(this.start, this.start + this.length)
    }
}

public class ParserGroup {
    variable: string
    value: ParsedRule
}

public class TokenReader {
    sourceText: string
    currentText: string
    cursor: usize
}

public class RuleState {
    moved: bool
    groups: List<ParserGroup>
}

public class ParsedRule {
    rule: string
    token: Token
    groups: List<ParserGroup>
}

public class Rule {
    name: string
    statements: List<ParserStatement>

    parse(reader: TokenReader): RuleResult {
        let state = new RuleState {
            moved = false
            groups = List.empty<ParserGroup>()
        }

        let start = reader.cursor
        for statement in this.statements {
            let result = statement.execute(reader, state)
            match result {
                Failure => {
                    if state.moved {
                        return RuleResult.HardFail
                    }
                    return RuleResult.SoftFail
                }
                _ => {}
            }
        }

        let length = reader.cursor - start
        return new RuleResult.Success {
            data = new ParsedRule {
                rule = this.name
                token = new Token {
                    start
                    length
                }
                groups = state.groups
            }
        }
    }
}

public interface ParserStatement {
    /// Returns true if the rule matched, otherwise false.
    execute(reader: TokenReader, state: RuleState): StatementResult
}

public class MoveStatement { }

implement ParserStatement for MoveStatement {
    execute(_: TokenReader, state: RuleState): StatementResult {
        state.moved = true

        return StatementResult.Matchless
    }
}

public class StringLiteralStatement {
    lit: string
}

implement ParserStatement for StringLiteralStatement {
    execute(reader: TokenReader, _: RuleState): StatementResult {
        return StatementResult.Failure
    }
}

public class SubruleStatement {
    subrule: Rule
}

implement ParserStatement for SubruleStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        let cursor = reader.cursor
        let ruleResult = this.subrule.parse(reader)
        match ruleResult {
            Success { data, } => return new StatementResult.Match {
                data
            }
            _ => return StatementResult.Failure
        }
    }
}

public class OrStatement {
    options: List<ParserStatement>
}

implement ParserStatement for OrStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        for option in this.options {
            let result = option.execute(reader, state)
            match result {
                Match { data, } => return result
                _ => {}
            }
        }
        return StatementResult.Failure
    }
}

public class GroupStatement {
    groupName: string
    value: ParserStatement
}

implement ParserStatement for GroupStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        let result = this.value.execute(reader, state)
        match result {
            Success { data, } => {
                state.groups.push(new ParserGroup {
                    variable = this.groupName
                    value = result
                })
            }
            _ => {}
        }

        return result
    }
}
