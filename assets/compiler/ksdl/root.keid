namespace keidc::ksdl

import (
    core::collections
    core::error
    core::object
    core::string
)

public struct TokenLocation {
    /// The index of the first character of the token, relative to the start of the entire program input.
    start: usize
    /// The length of the matched token.
    length: usize

    public static create(start: usize, length: usize): TokenLocation => new TokenLocation { start, length, }

    public joined(other: TokenLocation): TokenLocation {
        let start = math.min<usize>(this.start, other.start)
        let length = this.length + other.length
        return TokenLocation.create(start, length)
    }

    public getText(program: string): string {
        return program.substring(this.start, this.start + this.length)
    }
}

implement ToString for TokenLocation {
    toString(): string => string.format(this.start.toString(), "+", this.length.toString())
}

public class RuleMatchGroup {
    variable: string
    values: List<ParserMatch>
}

public class RuleMatch {
    ruleName: string
    loc: TokenLocation
    groups: List<RuleMatchGroup>

    public hasGroup(variable: string): bool {
        for group in this.groups {
            if group.variable == variable {
                return true
            }
        }

        return false
    }

    public getGroup(variable: string): List<ParserMatch>  {
        for group in this.groups {
            if group.variable == variable {
                return group.values
            }
        }

        throw Error.create(string.format("no such group with variable name '", variable, "' in rule '", this.ruleName, "'"))
    }

    public getGroupValue(variable: string): ParserMatch {
        let group = this.getGroup(variable)
        if group.length != 1 {
            throw Error.create(string.format("group '", variable, "' in rule '", this.ruleName, "' does not have only one match"))
        }
        return group.get(0)
    }
}

implement ToString for RuleMatch {
    toString(): string {
        let sb = StringBuilder.empty()
        sb.append("RULE ")
        sb.append(this.ruleName)
        sb.append(" at ")
        sb.append(this.loc.toString())
        sb.append("; Groups: ")
        for group in this.groups {
            sb.append(group.variable)
            sb.append(" = ")
            sb.append(group.values.length.toString())
            sb.append("[")
            for value in group.values {
                sb.append(value.toString())
                sb.append(", ")
            }
            sb.append("], ")
        }
        return sb.toString()
    }
}
