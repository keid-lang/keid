namespace keidc::ksdl

import (
    core::collections
    core::error
    core::object
    core::string
)

public class Token {
    /// The index of the first character of the token, relative to the start of the entire program input.
    start: usize
    /// The length of the matched token.
    length: usize

    public static create(start: usize, length: usize): Token => new Token { start, length, }

    public getText(program: string): string {
        return program.substring(this.start, this.start + this.length)
    }
}

implement ToString for Token {
    toString(): string => string.format(this.start.toString(), "+", this.length.toString())
}

public class RuleMatchGroup {
    variable: string
    values: List<RuleMatch>
}

public class RuleMatch {
    rule: string
    token: Token
    groups: List<RuleMatchGroup>
}

implement ToString for RuleMatch {
    toString(): string {
        let sb = StringBuilder.empty()
        sb.append("RULE ")
        sb.append(this.rule)
        sb.append(" at ")
        sb.append(this.token.toString())
        sb.append("; Groups: ")
        for group in this.groups {
            sb.append(group.variable)
            sb.append(" = ")
            sb.append(group.values.length.toString())
            sb.append("[")
            for value in group.values {
                sb.append(value.toString())
            }
            sb.append("], ")
        }
        return sb.toString()
    }
}
