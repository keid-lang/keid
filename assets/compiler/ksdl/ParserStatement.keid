namespace keidc::ksdl

import (
    core::collections
)

public enum StatementResult {
    /// Returned by statements when they match with a token result.
    Match {
        matches: List<RuleMatch>
    }
    /// Returned by statements which don't perform matching operations, e.g. `move`.
    /// A matchless result is always considered successful.
    Matchless
    /// Returned by statements when they attempt to match a token and fail.
    Failure
}

public interface ParserStatement {
    /// Returns true if the rule matched, otherwise false.
    execute(reader: TokenReader, state: RuleState): StatementResult
}

public class MoveStatement { }

implement ParserStatement for MoveStatement {
    execute(_: TokenReader, state: RuleState): StatementResult {
        state.moved = true

        return StatementResult.Matchless
    }
}

public class StringLiteralStatement {
    lit: string

    public static create(lit: string): StringLiteralStatement => new StringLiteralStatement { lit, }
}

implement ParserStatement for StringLiteralStatement {
    execute(reader: TokenReader, _: RuleState): StatementResult {
        if reader.startsWith(this.lit) {
            reader.advance(this.lit.length)
            return StatementResult.Matchless
        }
        return StatementResult.Failure
    }
}

public class SubruleStatement {
    subrule: Rule

    public static create(subrule: Rule): SubruleStatement => new SubruleStatement { subrule, }
}

implement ParserStatement for SubruleStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        let cursor = reader.cursor
        let ruleResult = this.subrule.parse(reader)
        match ruleResult {
            Success { match, } => return new StatementResult.Match {
                matches = List.from<RuleMatch>(match)
            }
            _ => return StatementResult.Failure
        }
    }
}

public class UntilStatement {
    statement: ParserStatement

    public static create(statement: ParserStatement): UntilStatement => new UntilStatement { statement, }
}

implement ParserStatement for UntilStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        loop {
            match this.statement.execute(reader, state) {
                Match { matches, } => break
                Matchless => break
                _ => {
                    reader.skipWhitespace()
                    reader.advance(1)
                }
            }
        }
        return StatementResult.Matchless
    }
}

public class OptionalStatement {
    statement: ParserStatement

    public static create(statement: ParserStatement): OptionalStatement => new OptionalStatement { statement, }
}

implement ParserStatement for OptionalStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        return match this.statement.execute(reader, state) {
            Match { matches, } => new StatementResult.Match { matches, }
            _ => StatementResult.Matchless
        }
    }
}

public class OrStatement {
    options: List<ParserStatement>

    public static create(options: List<ParserStatement>): OrStatement => new OrStatement { options, }
}

implement ParserStatement for OrStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        for option in this.options {
            let result = option.execute(reader, state)
            match result {
                Match { matches, } => return result
                Matchless => return result
                _ => {}
            }
        }
        return StatementResult.Failure
    }
}

public class GroupStatement {
    groupName: string
    value: ParserStatement

    public static create(groupName: string, value: ParserStatement): GroupStatement => new GroupStatement { groupName, value, }
}

implement ParserStatement for GroupStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        let result = this.value.execute(reader, state)
        match result {
            Match { matches, } => {
                for group in state.groups {
                    if group.variable == this.groupName {
                        group.values.extend(matches)
                        return result
                    }
                }
                state.groups.push(new RuleMatchGroup {
                    variable = this.groupName
                    values = matches
                })
            }
            _ => {}
        }

        return result
    }
}

public class CharRangeStatement {
    start: char
    end: char

    public static create(start: char, end: char): CharRangeStatement => new CharRangeStatement { start, end, }
}

implement ParserStatement for CharRangeStatement {
    execute(reader: TokenReader, _: RuleState): StatementResult {
        reader.skipWhitespace()
        let currentCharacter = reader.currentCharacter
        if currentCharacter >= this.start && currentCharacter <= this.end {
            reader.advance(1)
            return StatementResult.Matchless
        }
        return StatementResult.Failure
    }
}

public class RepeatedStatement {
    child: ParserStatement
    optional: bool

    public static create(child: ParserStatement, optional: bool): RepeatedStatement => new RepeatedStatement { child, optional, }
}

implement ParserStatement for RepeatedStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        let resultMatches = List.empty<RuleMatch>()
        if !this.optional {
            match this.child.execute(reader, state) {
                Failure => return StatementResult.Failure
                Match { matches, } => {
                    resultMatches.extend(matches)
                }
                _ => {}
            }
        }

        loop {
            match this.child.execute(reader, state) {
                Failure => break
                Match { matches, } => {
                    resultMatches.extend(matches)
                }
                _ => {}
            }
        }

        return new StatementResult.Match {
            matches = resultMatches
        }
    }
}

public class CompoundStatement {
    statements: List<ParserStatement>

    public static create(statements: List<ParserStatement>): CompoundStatement => new CompoundStatement { statements, }
}

implement ParserStatement for CompoundStatement {
    execute(reader: TokenReader, state: RuleState): StatementResult {
        for statement in this.statements {
            match statement.execute(reader, state) {
                Failure => return StatementResult.Failure
                _ => {}
            }
        }
        return StatementResult.Matchless
    }
}
