namespace keidc::ksdl

import (
    core::collections
    core::error
    core::object
)

class LineReader {
    lines: [string]
    num: usize

    next() {
        if !this.isFinished {
            this.num += 1
        }
    }

    public get isFinished: bool => this.num == this.lines.length
    
    public get line: string => this.lines[this.num].trim()
}

public class Alias {
    name: string
    statement: ParserStatement
}

public class KsdlParser {
    rules: List<Rule>
    aliases: List<Alias>

    public static fromKsdl(ksdl: string): KsdlParser {
        let parser = new KsdlParser {
            rules = List.empty<Rule>()
            aliases = List.empty<Alias>()
        }
        parser.parseKsdl(ksdl)
        return parser
    }

    parseKsdl(ksdl: string) {
        let reader = new LineReader {
            lines = ksdl.split("\n")
            num = 0
        }

        while !reader.isFinished {
            let line = reader.line

            if line.startsWith("RULE") {
                let name = line.substringAfter(5).trim()
                this.rules.push(new Rule {
                    name
                    statements = List.empty<ParserStatement>()
                })
            }
            reader.next()
        }
        reader.num = 0

        let isParsingRule = false
        while !reader.isFinished {
            let line2 = reader.line

            if line2.startsWith("RULE") {
                isParsingRule = true
            } else if line2.startsWith("END RULE") {
                isParsingRule = false
            } else if line2.startsWith("ALIAS") {
                if !isParsingRule {
                    let after = line2.substringAfter(6).trim()
                    let sep2 = after.indexOf(" ")
                    let name2 = after.substringBefore(sep2!).trim()
                    let statement = this.parseStatement(after.substringAfter(sep2! + 1).trim())
                    this.aliases.push(new Alias {
                        name = name2
                        statement
                    })
                }
            }
            reader.next()
        }
        reader.num = 0

        while !reader.isFinished {
            // TODO: why does this conflict with the first declaration of `line`?
            let line3 = reader.line

            if line3.startsWith("RULE") {
                let name = line3.substringAfter(5).trim()
                let sep = name.indexOf(" ")
                if sep != null {
                    name = name.substringBefore(sep!)
                }
                this.parseRule(this.getRule(name), reader)
            }
            reader.next()
        }
    }

    parseRule(rule: Rule, reader: LineReader): Rule {
        reader.next()
        while !reader.isFinished {
            let line = reader.line
            if line == "END RULE" {
                return rule
            }

            rule.statements.push(this.parseStatement(line))

            reader.next()
        }
        throw Error.create("missing 'end rule'")
    }

    parseStatement(line: string): ParserStatement {
        if line == "MOVE" {
            return new MoveStatement {}
        } else if line.startsWith("COMPOUND") {
            let inside = line.substring(line.indexOf("(")! + 1, line.indexOf(")")!).trim()
            let parts = inside.split(",")
            let options = List.withCapacity<ParserStatement>(parts.length)
            for part in parts {
                options.push(this.parseStatement(part.trim()))
            }
            return CompoundStatement.create(options)
        } else if line.startsWith("REPEATED") {
            let statement = this.parseStatement(line.substringAfter(9).trim())
            return RepeatedStatement.create(statement, false)
        } else if line.startsWith("OPTIONAL REPEATED") {
            let statement = this.parseStatement(line.substringAfter(18).trim())
            return RepeatedStatement.create(statement, true)
        } else if line.startsWith("OPTIONAL") {
            let statement = this.parseStatement(line.substringAfter(9).trim())
            return OptionalStatement.create(statement)
        } else if line.startsWith("OPERATOR") {
            let op = line.substringAfter(8).trim()
            return OperatorStatement.create(match op {
                "COMMA" => ","
                "OPEN_PAREN" => "("
                "CLOSE_PAREN" => ")"
                _ => op
            })
        } else if line.startsWith("TOKEN") {
            return new TokenStatement {}
        } else if line.startsWith("LITERAL") {
            return new LiteralStatement {}
        } else if line.startsWith("NEWLINE") {
            return new NewlineStatement {}
        } else if line.startsWith("IDENTIFIER") {
            return new IdentifierStatement {}
        } else if line.startsWith("KEYWORD") {
            let keyword = line.substringAfter(8).trim()
            return KeywordStatement.create(keyword)
        } else if line.startsWith("RULE") {
            let ruleName = line.substringAfter(5).trim()
            let rule = this.getRule(ruleName)
            return SubruleStatement.create(rule)
        } else if line.startsWith("ALIAS") {
            let aliasName = line.substringAfter(6).trim()
            return this.getAlias(aliasName)
        } else if line.startsWith("$") {
            let groupName = line.substring(1, line.indexOf("=")!).trim()
            let statement = this.parseStatement(line.substringAfter(line.indexOf("=")! + 1).trim())
            return GroupStatement.create(groupName, statement)
        } else if line.startsWith("OR") {
            let inside = line.substring(line.indexOf("(")! + 1, line.indexOf(")")!).trim()
            let parts = inside.split(",")
            let options = List.withCapacity<ParserStatement>(parts.length)
            for part in parts {
                options.push(this.parseStatement(part.trim()))
            }
            return OrStatement.create(options)
        } else if line.startsWith("UNTIL") {
            let statement = this.parseStatement(line.substringAfter(6).trim())
            return UntilStatement.create(statement)
        } else if line.startsWith("NOT") {
            let statement = this.parseStatement(line.substringAfter(4).trim())
            return NotStatement.create(statement)
        }
        throw Error.create(string.format("Invalid KSDL: ", line))
    }

    public getAlias(name: string): ParserStatement {
        for alias in this.aliases {
            if alias.name == name {
                return alias.statement
            }
        }

        throw Error.create(string.format("no such alias: ", name))
    }

    public getRule(name: string): Rule {
        for rule in this.rules {
            if rule.name == name {
                return rule
            }
        }

        throw Error.create(string.format("no such rule: ", name))
    }
}
