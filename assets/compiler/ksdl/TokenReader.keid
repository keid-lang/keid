namespace keidc::ksdl

public struct DocumentPosition {
    line: uint32
    col: uint32
}

public class TokenReader {
    sourceText: string
    cursor: usize
    isSkipWhitespace: bool

    public static create(source: string): TokenReader => new TokenReader {
        sourceText = source
        cursor = 0
        isSkipWhitespace = true
    }

    public skipWhitespace() {
        if this.isSkipWhitespace {
            // TODO: make boolean operators short-circuiting
            if this.isFinished {
                return
            }
            while this.currentCharacter == ' ' {
                this.advance(1)
                if this.isFinished {
                    break
                }
            }
        }
    }

    public startsWith(text: string): bool {
        this.skipWhitespace()
        if this.cursor + text.length > this.sourceText.length {
            return false
        }
        return this.sourceText.substring(this.cursor, this.cursor + text.length) == text
    }

    public advance(length: usize) {
        this.cursor += length
    }

    public retreat(length: usize) {
        this.cursor -= length
    }

    public get isFinished: bool => this.cursor >= this.sourceText.length

    public get currentCharacter: char => this.sourceText.chars[this.cursor]

    public get documentPosition: DocumentPosition {
        let s = this.sourceText.substringBefore(this.cursor)
        let col = match s.contains("\n") {
            true => s.length - s.lastIndexOf("\n")!
            false => s.length + 1
        }
        return new DocumentPosition {
            line = s.occurrences('\n') as uint32 + 1
            col = col as uint32
        }
    }
}
