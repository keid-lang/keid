namespace keidc::types

import (
    core::collections
    core::error
    core::object
    core::string
)

public class QualifiedIdent {
    name: string
    generics: List<ComplexType>

    public static withName(name: string): QualifiedIdent => new QualifiedIdent {
        name
        generics = List.empty<ComplexType>()
    }

    public static withGenerics(name: string, generics: List<ComplexType>): QualifiedIdent => new QualifiedIdent { name, generics, }
}

implement ToString for QualifiedIdent {
    toString(): string {
        let sb = StringBuilder.withCapacity(this.name.length)
        sb.append(this.name)
        if this.generics.length > 0 {
            sb.append("<")
            for generic in this.generics {
                sb.append(generic.toString())
                sb.append(", ")
            }
            sb.move(-2)
            sb.append(">")
        }
        return sb.toString()
    }
}

implement ToString for ComplexType {
    toString(): string {
        return match this {
            Basic {
                basic
            } => basic.toString()
            Array {
                element
            } => string.format("[", element.toString(), "]")
            Nullable {
                element
            } => string.format("?", element.toString())
            _ => "unknown"
        }
    }
}

public enum ComplexType {
    Basic {
        basic: BasicType
    }
    Array {
        element: Box<ComplexType>
    }
    Nullable {
        element: Box<ComplexType>
    }
}

// this should not be an interface, only here due to restrictions of the pre-0.1 compiler
// TODO: move to enum body in 0.1
public interface ComplexTypeImpl {
    get root: BasicType

    withRoot(root: ComplexType): ComplexType
}

implement ComplexTypeImpl for ComplexType {
    get root: BasicType {
        return match this {
            Basic { basic, } => basic
            Array { element, } => element.root
            Nullable { element, } => element.root
        }
    }

    withRoot(root: ComplexType): ComplexType {
        return match this {
            Basic { basic, } => root
            Array { element, } => new ComplexType.Array {
                element = element.withRoot(root)
            }
            Nullable { element, } => new ComplexType.Nullable {
                element = element.withRoot(root)
            }
        }
    }
}

public enum BasicType {
    Void
    Bool
    Char
    UInt8
    UInt16
    UInt32
    UInt64
    Int8
    Int16
    Int32
    Int64
    Float32
    Float64
    USize
    ISize
    Ident { ident: QualifiedIdent }
    Null
    Unknown
    Never
}

implement ToString for BasicType {
    toString(): string {
        return match this {
            Void => "void"
            Bool => "bool"
            Char => "char"
            UInt8 => "uint8"
            UInt16 => "uint16"
            UInt32 => "uint32"
            UInt64 => "uint64"
            Int8 => "int8"
            Int16 => "int16"
            Int32 => "int32"
            Int64 => "int64"
            Float32 => "float32"
            Float64 => "float64"
            USize => "usize"
            ISize => "isize"
            Ident { ident } => ident.toString()
            Null => "null"
            Never => "never"
            _ => "unknown"
        }
    }
}
