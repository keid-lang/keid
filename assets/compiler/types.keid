namespace keidc

import (
    core::collections
    core::error
    core::object
    core::string
)

public class QualifiedIdent {
    name: string
    generics: List<ComplexType>
}

implement ToString for QualifiedIdent {
    toString(): string {
        let sb = StringBuilder.withCapacity(this.name.length)
        sb.append(this.name)
        if this.generics.length > 0 {
            sb.append("<")
            sb.append(">")
        }
        return sb.toString()
    }
}

implement ToString for ComplexType {
    toString(): string {
        std::io.println("Complex Variant: ", this.variant.toString())
        return match this {
            Basic {
                type
            } => type.toString()
            Array {
                element
            } => string.format("[", element.toString(), "]")
            Nullable {
                element
            } => string.format("?", element.toString())
            _ => "unknown"
        }
    }
}

public enum ComplexType {
    Basic {
        type: BasicType
    }
    Array {
        element: Box<ComplexType>
    }
    Nullable {
        element: Box<ComplexType>
    }
}

public enum BasicType {
    Void
    Bool
    Char
    UInt8
    UInt16
    UInt32
    UInt64
    Int8
    Int16
    Int32
    Int64
    Float32
    Float64
    USize
    ISize
    Object { ident: QualifiedIdent }
    StructPointer { pointee_ident: QualifiedIdent }
    Null
    Unknown
}

implement ToString for BasicType {
    toString(): string {
        std::io.println("Basic Variant: ", this.variant.toString())
        return match this {
            Void => "void"
            Object { ident } => ident.toString()
            _ => "unknown"
            // _ => throw Error.create("no")
        }
    }
}
