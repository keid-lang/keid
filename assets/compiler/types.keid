namespace keidc::types

import (
    core::collections
    core::error
    core::object
    core::string
)

public class QualifiedIdent {
    name: string
    generics: List<ComplexType>

    public static withName(name: string): QualifiedIdent => new QualifiedIdent {
        name
        generics = List.empty<ComplexType>()
    }

    public static withGenerics(name: string, generics: List<ComplexType>): QualifiedIdent => new QualifiedIdent { name, generics, }
}

implement ToString for QualifiedIdent {
    toString(): string {
        let sb = StringBuilder.withCapacity(this.name.length)
        sb.append(this.name)
        if this.generics.length > 0 {
            sb.append("<")
            sb.append(">")
        }
        return sb.toString()
    }
}

implement ToString for ComplexType {
    toString(): string {
        return match this {
            Basic {
                basic
            } => basic.toString()
            Array {
                element
            } => string.format("[", element.toString(), "]")
            Nullable {
                element
            } => string.format("?", element.toString())
            _ => "unknown"
        }
    }
}

public enum ComplexType {
    Basic {
        basic: BasicType
    }
    Array {
        element: Box<ComplexType>
    }
    Nullable {
        element: Box<ComplexType>
    }
}

public enum BasicType {
    Void
    Bool
    Char
    UInt8
    UInt16
    UInt32
    UInt64
    Int8
    Int16
    Int32
    Int64
    Float32
    Float64
    USize
    ISize
    Object { ident: QualifiedIdent }
    StructPointer { pointee_ident: QualifiedIdent }
    Null
    Unknown
}

implement ToString for BasicType {
    toString(): string {
        return match this {
            Void => "void"
            Bool => "bool"
            Char => "char"
            UInt8 => "uint8"
            UInt16 => "uint16"
            UInt32 => "uint32"
            UInt64 => "uint64"
            Int8 => "int8"
            Int16 => "int16"
            Int32 => "int32"
            Int64 => "int64"
            Float32 => "float32"
            Float64 => "float64"
            USize => "usize"
            ISize => "isize"
            Object { ident } => ident.toString()
            _ => "unknown"
        }
    }
}
