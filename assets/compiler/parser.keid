namespace keidc::parser

import (
    core::collections
    core::error
    core::string
    core::object
    keidc::ast
    keidc::common
    keidc::ksdl
    keidc::types
    std::fs
)

function tokenize<T>(ast: RuleMatch, node: T): AstToken<T> {
    return new AstToken<T> {
        node
        loc = ast.token
    }
}

public enum PrattParserAffix {
    Prefix
    Infix
    Postfix
}

implement ToString for PrattParserAffix {
    toString(): string => match this {
        Prefix => "Prefix"
        Infix => "Infix"
        Postfix => "Postfix"
    }
}

const PRECEDENCE_STEP: uint32 = 10
const OPERATORS: [PrattParserOperator] = new PrattParserOperator[
    PrattParserOperator.create(PrattParserAffix.Infix, ".", AstOperator.MemberAccess, PRECEDENCE_STEP * 1),
    PrattParserOperator.create(PrattParserAffix.Infix, "??", AstOperator.NullCoalesce, PRECEDENCE_STEP * 2),
    PrattParserOperator.create(PrattParserAffix.Infix, "||", AstOperator.BooleanOr, PRECEDENCE_STEP * 3),
    PrattParserOperator.create(PrattParserAffix.Infix, "&&", AstOperator.BooleanAnd, PRECEDENCE_STEP * 4),
    PrattParserOperator.create(PrattParserAffix.Infix, "==", AstOperator.Equals, PRECEDENCE_STEP * 5),
    PrattParserOperator.create(PrattParserAffix.Infix, "!=", AstOperator.NotEquals, PRECEDENCE_STEP * 5),
    PrattParserOperator.create(PrattParserAffix.Infix, "<", AstOperator.LessThan, PRECEDENCE_STEP * 6),
    PrattParserOperator.create(PrattParserAffix.Infix, "<=", AstOperator.LessThanOrEquals, PRECEDENCE_STEP * 6),
    PrattParserOperator.create(PrattParserAffix.Infix, ">", AstOperator.GreaterThan, PRECEDENCE_STEP * 6),
    PrattParserOperator.create(PrattParserAffix.Infix, ">=", AstOperator.GreaterThanOrEquals, PRECEDENCE_STEP * 6),
    PrattParserOperator.create(PrattParserAffix.Infix, "<<", AstOperator.LeftShift, PRECEDENCE_STEP * 7),
    PrattParserOperator.create(PrattParserAffix.Infix, ">>", AstOperator.RightShift, PRECEDENCE_STEP * 7),
    PrattParserOperator.create(PrattParserAffix.Infix, "+", AstOperator.Add, PRECEDENCE_STEP * 8),
    PrattParserOperator.create(PrattParserAffix.Infix, "-", AstOperator.Subtract, PRECEDENCE_STEP * 8),
    PrattParserOperator.create(PrattParserAffix.Infix, "*", AstOperator.Multiply, PRECEDENCE_STEP * 9),
    PrattParserOperator.create(PrattParserAffix.Infix, "/", AstOperator.Divide, PRECEDENCE_STEP * 9),
    PrattParserOperator.create(PrattParserAffix.Infix, "%", AstOperator.Modulus, PRECEDENCE_STEP * 9),
    PrattParserOperator.create(PrattParserAffix.Infix, "as", AstOperator.As, PRECEDENCE_STEP * 10),
    PrattParserOperator.create(PrattParserAffix.Prefix, "not", AstOperator.Not, PRECEDENCE_STEP * 11),
    PrattParserOperator.create(PrattParserAffix.Prefix, "...", AstOperator.Spread, PRECEDENCE_STEP * 12),
    PrattParserOperator.create(PrattParserAffix.Postfix, "!", AstOperator.NonNullAssertion, PRECEDENCE_STEP * 13),
]

public class PrattParserOperator {
    affix: PrattParserAffix
    text: string
    ast: AstOperator
    precedence: uint32

    public static create(affix: PrattParserAffix, text: string, ast: AstOperator, precedence: uint32): PrattParserOperator => new PrattParserOperator { affix, text, ast, precedence, }
}

implement ToString for PrattParserOperator {
    toString(): string => string.format("PrattParserOperator(affix=", this.affix.toString(), ", text=", this.text, ", ast=", this.ast.toString(), ", precedence=" + this.precedence.toString(), ")")
}

public class PrattParser {
    source: string
    parts: List<RuleMatch>
    offset: usize
    operators: [PrattParserOperator]
    primaryParser: function (ast: RuleMatch) => AstToken<AstExpr>
    prefixParser: function (op: AstToken<AstOperator>, operand: AstToken<AstExpr>) => AstToken<AstExpr>
    infixParser: function (lhs: AstToken<AstExpr>, op: AstToken<AstOperator>, rhs: AstToken<AstExpr>) => AstToken<AstExpr>
    postfixParser: function (operand: AstToken<AstExpr>, op: AstToken<AstOperator>) => AstToken<AstExpr>

    public parse(): AstToken<AstExpr> {
        return this.expr(0)
    }

    findOperator(text: string): ?PrattParserOperator {
        for operator in this.operators {
            if operator.text == text {
                return operator
            }
        }

        return null
    }

    expr(rbp: uint32): AstToken<AstExpr> {
        let lhs = this.nud()
        while rbp < this.lbp() {
            lhs = this.led(lhs)
        }
        return lhs
    }

    lbp(): uint32 {
        if this.offset == this.parts.length {
            return 0
        }
        let next = this.parts.get(this.offset)
        let op = this.findOperator(next.token.getText(this.source))
        if op == null {
            return 0
        }
        return op!.precedence
    }

    led(lhs: AstToken<AstExpr>): AstToken<AstExpr> {
        let next = this.parts.get(this.offset)
        this.offset += 1
        match next.rule {
            "InfixOperator" => {
                let text = next.token.getText(this.source)
                let infixOperator = this.findOperator(text)
                if infixOperator == null {
                    throw Error.create("No such operator: " + text)
                }
                let rhs = this.expr(infixOperator!.precedence)
                return (this.infixParser)(lhs, tokenize<AstOperator>(next, infixOperator!.ast), rhs)
            }
            "PostfixOperator" => {
                let text2 = next.token.getText(this.source)
                let postfixOperator = this.findOperator(text2)
                if postfixOperator == null {
                    throw Error.create("No such operator: " + text2)
                }
                return (this.postfixParser)(lhs, tokenize<AstOperator>(next, postfixOperator!.ast))
            }
            _ => {}
        }

        throw Error.create("expected infix or postfix expression")
    }

    nud(): AstToken<AstExpr> {
        let next = this.parts.get(this.offset)
        this.offset += 1
        return match next.rule {
            "PrefixOperator" => {
                let text = next.token.getText(this.source)
                let prefixOperator = this.findOperator(text)
                if prefixOperator == null {
                    throw Error.create("No such operator: " + text)
                }
                let rhs = this.expr(prefixOperator!.precedence - 1)
                return (this.prefixParser)(tokenize<AstOperator>(next, prefixOperator!.ast), rhs)
            }
            _ => (this.primaryParser)(next)
        }
    }
}

class KeidParser {
    source: string

    parseString(ast: RuleMatch): AstToken<string> {
        return tokenize<string>(ast, ast.token.getText(this.source))
    }

    parseGenericDecls(ast: RuleMatch): List<AstGenericDecl> {
        let decls = List.empty<AstGenericDecl>()
        for decl in ast.getGroup("decls") {
            let declName = decl.getGroupValue("name")
            decls.push(new AstGenericDecl {
                name = this.parseString(declName)
            })
        }
        return decls
    }

    parseGenericArgs(ast: RuleMatch, group: string): List<AstToken<ComplexType>> {
        let args = List.empty<AstToken<ComplexType>>()
        if ast.hasGroup(group) {
            for arg in ast.getGroupValue(group).getGroup("args") {
                args.push(this.parseValueType(arg))
            }
        }
        return args
    }

    parseGenericArgsNodes(ast: RuleMatch): List<ComplexType> {
        let args = List.empty<ComplexType>()
        if ast.hasGroup("generics") {
            for arg in ast.getGroupValue("generics").getGroup("args") {
                args.push(this.parseValueTypeNode(arg))
            }
        }
        return args
    }

    parseModifers(parentAstNode: RuleMatch): List<AstToken<Modifier>> {
        if parentAstNode.hasGroup("modifiers") {
            let astModifiers = parentAstNode.getGroup("modifiers")
            let modifiers = List.withCapacity<AstToken<Modifier>>(astModifiers.length)
            for astModifier in astModifiers {
                let text = astModifier.token.getText(this.source)
                let modifier = match text {
                    "public" => Modifier.Public
                    "extern" => Modifier.Extern
                    "static" => Modifier.Static
                    // TODO: fix this not compiling _ => throw Error.create("ParseError: invalid modifier: " + text)
                }
                modifiers.push(new AstToken<Modifier> {
                    node = modifier
                    loc = astModifier.token
                })
            }
            return modifiers
        }
        return List.empty<AstToken<Modifier>>()
    }

    parsePrefixExpr(operator: AstToken<AstOperator>, operand: AstToken<AstExpr>): AstToken<AstExpr> {
        return new AstToken<AstExpr> {
            node = new AstExpr.Unary {
                operator
                operand
            }
            loc = operator.loc.joined(operand.loc)
        }
    }

    parseInfixExpr(lhs: AstToken<AstExpr>, operator: AstToken<AstOperator>, rhs: AstToken<AstExpr>): AstToken<AstExpr> {
        return new AstToken<AstExpr> {
            node = new AstExpr.Binary {
                lhs
                operator
                rhs
            }
            loc = lhs.loc.joined(rhs.loc)
        }
    }

    parsePostfixExpr(operand: AstToken<AstExpr>, operator: AstToken<AstOperator>): AstToken<AstExpr> {
        return new AstToken<AstExpr> {
            node = new AstExpr.Unary {
                operator
                operand
            }
            loc = operand.loc.joined(operator.loc)
        }
    }

    parseExprOperand(operand: RuleMatch): AstToken<AstExpr> {
        return tokenize<AstExpr>(operand, match operand.rule {
            "GroupingExpr" => return this.parseExprOperand(operand.getGroupValue("expr"))
            "Null" => AstExpr.Null
            "Bool" => new AstExpr.BoolLit {
                value = match operand.token.getText(this.source) {
                    "true" => true
                    "false" => false
                    _ => unreachable
                }
            }
            _ => unreachable
        })
    }

    parseExpr(expr: RuleMatch): AstToken<AstExpr> {
        let pratt = new PrattParser {
            source = this.source
            parts = expr.getGroup("parts")
            offset = 0
            operators = OPERATORS
            primaryParser = this.parseExprOperand
            prefixParser = this.parsePrefixExpr
            infixParser = this.parseInfixExpr
            postfixParser = this.parsePostfixExpr
        }
        return pratt.parse()
    }

    parseBody(bodyDecl: RuleMatch): List<AstToken<AstStatement>> {
        match bodyDecl.rule {
            "CodeBlock" => return this.parseCodeBlock(bodyDecl)
            "ArrowBlock" => {
                let exprDecl = bodyDecl.getGroupValue("expr")
                let expr = this.parseExpr(exprDecl)
                let statement = new AstStatement.Expr {
                    value = expr
                }
                return List.from<AstToken<AstStatement>>(tokenize<AstStatement>(exprDecl, statement))
            }
        }

        unreachable
    }

    parseCodeBlock(ast: RuleMatch): List<AstToken<AstStatement>> {
        let statements = List.empty<AstToken<AstStatement>>()
        if ast.hasGroup("statements") {
            for statement in ast.getGroup("statements") {
                let statementAst = match statement.rule {
                    "ReturnStatement" => new AstStatement.Return { operand = this.parseExpr(statement.getGroupValue("operand")), }
                    "Expr" => new AstStatement.Expr { value = this.parseExpr(statement), }
                }
                statements.push(tokenize<AstStatement>(statement, statementAst))
            }
        }
        return statements
    }

    parseValueTypeNode(ast: RuleMatch): ComplexType {
        match ast.rule {
            "ArrayType" => return new ComplexType.Array {
                element = this.parseValueTypeNode(ast.getGroupValue("elementType"))
            }
            "NullableType" => return new ComplexType.Nullable {
                element = this.parseValueTypeNode(ast.getGroupValue("elementType"))
            }
            "BasicType" => {
                let path = this.parseString(ast.getGroupValue("path"))
                let generics = this.parseGenericArgsNodes(ast)
                let basic = match path.node {
                    "void"    => BasicType.Void
                    "bool"    => BasicType.Bool
                    "char"    => BasicType.Char
                    "uint8"   => BasicType.UInt8
                    "uint16"  => BasicType.UInt16
                    "uint32"  => BasicType.UInt32
                    "uint64"  => BasicType.UInt64
                    "int8"    => BasicType.Int8
                    "int16"   => BasicType.Int16
                    "int32"   => BasicType.Int32
                    "int64"   => BasicType.Int64
                    "float32" => BasicType.Float32
                    "float64" => BasicType.Float64
                    "usize"   => BasicType.USize
                    "isize"   => BasicType.ISize
                    _ => return new ComplexType.Basic {
                        basic = new BasicType.Object {
                            ident = new QualifiedIdent {
                                name = path.node
                                generics
                            }
                        }
                    }
                }
                if generics.length > 0 {
                    throw Error.create("parser error: primitive cannot have generics")
                }
                return new ComplexType.Basic {
                    basic
                }
            }
        }

        unreachable
    }

    parseValueType(ast: RuleMatch): AstToken<ComplexType> => tokenize<ComplexType>(ast, this.parseValueTypeNode(ast))

    parseClassField(ast: RuleMatch): AstClassField {
        let modifiers = this.parseModifers(ast)
        let name = this.parseString(ast.getGroupValue("name"))
        let type = this.parseValueType(ast.getGroupValue("type"))
        let initialValue: ?AstToken<AstExpr> = null
        if ast.hasGroup("initialValue") {
            initialValue = this.parseExpr(ast.getGroupValue("initialValue"))
        }
        return new AstClassField {
            modifiers
            name
            type
            initialValue
        }
    }

    parseFunctionParam(paramDecl: RuleMatch): AstFunctionParam {
        return new AstFunctionParam {
            name = this.parseString(paramDecl.getGroupValue("name"))
            type = this.parseValueType(paramDecl.getGroupValue("type"))
        }
    }

    parseFunction(decl: RuleMatch): AstFunction {
        let modifiers = this.parseModifers(decl)
        let name = this.parseString(decl.getGroupValue("name"))
        let generics: ?List<AstGenericDecl> = null
        if decl.hasGroup("generics") {
            generics = this.parseGenericDecls(decl.getGroupValue("generics"))
        }
        let params = List.empty<AstFunctionParam>()
        let paramsDecl = decl.getGroupValue("params")
        if paramsDecl.hasGroup("params") {
            for paramDecl in paramsDecl.getGroup("params") {
                params.push(this.parseFunctionParam(paramDecl))
            }
        }

        let returnType: ?AstToken<ComplexType> = null
        if decl.hasGroup("returnType") {
            returnType = this.parseValueType(decl.getGroupValue("returnType"))
        }

        let varargs = VarargsMode.None
        if decl.hasGroup("nativeVarargs") {
            varargs = VarargsMode.Native
        } else if decl.hasGroup("varargs") {
            let paramDecl = decl.getGroupValue("varargs").getGroupValue("param")
            varargs = new VarargsMode.Array {
                param = this.parseFunctionParam(paramDecl)
            }
        }

        let body = this.parseBody(decl.getGroupValue("body"))

        return new AstFunction {
            modifiers
            name
            generics
            params
            returnType
            varargs
            body
        }
    }

    parseClass(ast: RuleMatch): AstClass {
        let modifiers = this.parseModifers(ast)
        let kindAst = ast.getGroupValue("type")
        let kindText = kindAst.token.getText(this.source)
        let kind = tokenize<ObjectKind>(kindAst, match kindText {
            "class" => ObjectKind.Class
            "struct" => ObjectKind.Struct
            "interface" => ObjectKind.Interface
            "enum" => ObjectKind.Enum
        })

        let name = this.parseString(ast.getGroupValue("name"))
        let generics: ?List<AstGenericDecl> = null
        if ast.hasGroup("generics") {
            generics = this.parseGenericDecls(ast.getGroupValue("generics"))
        }

        let superclass: ?AstToken<string> = null
        let superclassGenerics: ?List<AstToken<ComplexType>> = null
        if ast.hasGroup("extends") {
            let extendsDecl = ast.getGroupValue("extends")
            let superclassDecl = extendsDecl.getGroupValue("superclass")
            superclass = this.parseString(superclassDecl)
            superclassGenerics = this.parseGenericArgs(extendsDecl, "generics")
        }

        let constructor: ?List<AstToken<AstStatement>> = null
        let destructor: ?List<AstToken<AstStatement>> = null
        let fields = List.empty<AstClassField>()
        let methods = List.empty<AstFunction>()
        if ast.hasGroup("statements") {
            let statements = ast.getGroup("statements")
            for statement in statements {
                match statement.rule {
                    "ConstructorDecl" => constructor = this.parseBody(statement.getGroupValue("body"))
                    "DestructorDecl"  => destructor  = this.parseBody(statement.getGroupValue("body"))
                    "FieldDecl" => {
                        fields.push(this.parseClassField(statement))
                    }
                    "FunctionDecl" => {
                        methods.push(this.parseFunction(statement))
                    }
                    _ => {
                        std::io.println("TODO: Class-level statement: ", statement.rule)
                    }
                }
            }
        }

        return new AstClass {
            kind
            modifiers
            name
            generics
            superclass
            superclassGenerics
            constructor
            destructor
            fields
            methods
        }
    }

    parseImplement(ast: RuleMatch): AstImplement {
        let generics: ?List<AstGenericDecl> = null
        if ast.hasGroup("generics") {
            generics = this.parseGenericDecls(ast.getGroupValue("generics"))
        }

        let interface = this.parseString(ast.getGroupValue("interface"))
        let interfaceGenerics: ?List<AstToken<ComplexType>> = null
        if ast.hasGroup("interfaceGenerics") {
            interfaceGenerics = this.parseGenericArgs(ast, "interfaceGenerics")
        }

        let target = this.parseString(ast.getGroupValue("target"))
        let targetGenerics: ?List<AstToken<ComplexType>> = null
        if ast.hasGroup("targetGenerics") {
            targetGenerics = this.parseGenericArgs(ast, "targetGenerics")
        }

        let methods = List.empty<AstFunction>()

        return new AstImplement {
            generics
            interface
            interfaceGenerics
            target
            targetGenerics
            methods
        }
    }

    parseProgram(ast: RuleMatch): AstKeidProgram {
        let namespaceAst = ast.getGroupValue("namespace").getGroupValue("namespace")
        let namespace = this.parseString(namespaceAst)
        let imports = List.empty<AstToken<string>>()
        let classes = List.empty<AstClass>()
        let impls = List.empty<AstImplement>()

        for statement in ast.getGroup("statements") {
            match statement.rule {
                "ImportStatement" => {
                    let modules = statement.getGroup("modules")
                    for module in modules {
                        imports.push(this.parseString(module))
                    }
                }
                "ClassDecl" => {
                    classes.push(this.parseClass(statement))
                }
                "EnumDecl" => {
                    classes.push(this.parseClass(statement))
                }
                "ImplementDecl" => {
                    impls.push(this.parseImplement(statement))
                }
                _ => unreachable
            }
        }

        return new AstKeidProgram {
            source = this.source
            namespace
            imports
            classes
            impls
        }
    }
}

public function createParsingEngine(): KsdlParser {
    let syntaxDefFile = File.open("../keid/assets/compiler/syntax.ksdl", FileOpenMode.ReadOnly)
    let syntaxDef = string.fromUtf8(syntaxDefFile.readAllBytes())
    syntaxDefFile.close()

    return KsdlParser.fromKsdl(syntaxDef)
}

public function parseKeidSource(parser: KsdlParser, programText: string): AstKeidProgram {
    let programRule = parser.getRule("Program")
    let reader = TokenReader.create(programText)
    let parseResult = programRule.parse(reader)
    if !reader.isFinished {
        std::io.println("At: '", reader.sourceText.substring(reader.cursor, reader.cursor + 20), "'")
        throw Error.create(string.format("Failed parsing rule: ", reader.currentRule!.name))
    }
    match parseResult {
        Success { match, } => {
            let keidParser = new KeidParser {
                source = programText
            }
            return keidParser.parseProgram(match)
        }
        HardFail { rule, statement, result, } => {
            std::io.println("Failed parsing statement: ", Class.fromInstance(statement).name)
            std::io.println("in rule: ", rule.name)
        }
        _ => {}
    }

    throw Error.create("Parse failure!")
}
