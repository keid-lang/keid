namespace keidc

import (
    core::collections
    core::string
    std::io
    std::fs
    std::os
    keidc::ast
    keidc::common
    keidc::registry
    keidc::parser
    keidc::ksdl
    keidc::types
)

function listKeidFiles(path: string, files: List<string>) {
    for file in Directory.at(path).listFiles() {
        let abs = string.format(path, "/", file)
        if abs.endsWith(".keid") {
            files.push(abs)
        } else {
            let fh = File.open(abs, FileOpenMode.ReadOnly)
            if fh.stat(abs).isDirectory {
                listKeidFiles(abs, files)
            }
        }
    }
}

public extern function main(): int32 {
    let files = List.empty<string>()
    listKeidFiles("../keid/assets/core2", files)

    let ksdlPreprocessor = parser.createPreprocessor()
    let ksdlParser = parser.createParser()
    let tmc = TypeMetadataCompiler.create()
    
    for file in files {
        io.println("Parsing ", file, "...")

        let prevTime = std::time.getSystemTime()
        let ast = parser.parseKeidSource(ksdlPreprocessor, ksdlParser, file)
        let elapsedTime = std::time.getSystemTime() - prevTime
        tmc.include(ast)
    
        io.println("Parsing took ", elapsedTime.milliseconds.toString(), "ms")
        io.println("AST: ", ast.toString(), "\n")
    }

    let startResolveTime = std::time.getSystemTime()
    let resolveErrors = tmc.resolveAll()    
    let endResolveTime = std::time.getSystemTime() - startResolveTime
    io.println("Type resolver took ", endResolveTime.milliseconds.toString(), "ms")

    if resolveErrors.length > 0 {
        for resolveError in resolveErrors {
            io.println(resolveError.toString())
        }

        os.exit(1)
    }

    // core::array tests
    // core::array::test.testArrayLength()
    // core::array::test.testArrayEquals()
    // core::array::test.testSingleElementCopy()
    // core::array::test.testMultipleElementCopy()
    // core::array::test.testArrayToString()

    // // core::string::format() tests
    // core::string::test.testIdentityFormat()
    // core::string::test.testAppendFormat()

    // // core::string::String tests
    // core::string::test.testEmptyString()
    // core::string::test.testFromUtf8()
    // core::string::test.testStringToString()
    // core::string::test.testStringEquals()
    // core::string::test.testStringsWithNul()
    // core::string::test.testStringAddition()
    // core::string::test.testStringFromCStr()
    // core::string::test.testIndexOf()
    // core::string::test.testLastIndexOf()
    // core::string::test.testSubstring()
    // core::string::test.testSplit()
    // core::string::test.testTrim()
    // core::string::test.testStartsWith()
    // core::string::test.testReplaceFirst()

    // // core::string::StringBuilder tests
    // core::string::test.testEmptyStringBuilder()
    // core::string::test.testEmptyAppend()
    // core::string::test.testEmptyDoubleAppend()
    // core::string::test.testPreallocatedTooSmall()
    // core::string::test.testPreallocatedTooBig()
    // core::string::test.testInsert()

    // // core::collections tests
    // core::collections::test.testListPushOnce()
    // core::collections::test.testListRemoveOnce()
    // core::collections::test.testListRemoveMany()
    // core::collections::test.testHashMapStringKeyStringValue()

    // // core::object::Class tests
    // core::object::test.testClassFromInstance()
    // core::object::test.testParseIntFromString()

    return 0
}
