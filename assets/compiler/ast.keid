namespace keidc::ast

import (
    core::collections
    core::string
    keidc::ksdl
    keidc::types
)

public class AstToken<T> {
    node: T
    loc: TokenLocation
}

/// Represents a simple single identifier like "foo".
// public type AstIdentifier    = AstToken<string>

/// Represents a fully qualified (i.e. potentially with namespace) path. 
// public type AstPathQualifier = AstToken<string>

public class AstGenericDecl {
    name: AstToken<string>
}

public enum KeidModifier {
    Public
    Static
    Extern
}

implement ToString for KeidModifier {
    toString(): string {
        return match this {
            Public => "public"
            Static => "static"
            Extern => "extern"
        } 
    }
}

public enum AstClassType {
    Class
    Struct
    Interface
    Enum
}

implement ToString for AstClassType {
    toString(): string {
        return match this {
            Class => "class"
            Struct => "struct"
            Interface => "interface"
            Enum => "enum"
        }
    }
}

public class AstClassField {
    modifiers: List<AstToken<KeidModifier>>
    name: AstToken<string>
    type: AstToken<ComplexType>
    initialValue: ?AstToken<AstExpr>
}

implement ToString for AstClassField {
    toString(): string {
        let sb = StringBuilder.empty()
        sb.append("AstClassField(name=")
        sb.append(this.name.node)
        sb.append(", type=")
        sb.append(this.type.node.toString())
        sb.append(")")
        return sb.toString()
    }
}

public class AstClass {
    type: AstToken<AstClassType>
    modifiers: List<AstToken<KeidModifier>>
    name: AstToken<string>
    generics: ?List<AstGenericDecl>
    constructor: ?List<AstToken<AstStatement>>
    destructor: ?List<AstToken<AstStatement>>
    fields: List<AstClassField>
}

implement ToString for AstClass {
    toString(): string {
        let sb = StringBuilder.empty()
        sb.append("AstClass(type=")
        sb.append(this.type.node.toString())
        sb.append(", name=")
        sb.append(this.name.node)
        sb.append(", modifiers=[")
        for modifier in this.modifiers {
            sb.append(modifier.node.toString())
            sb.append(", ")
        }
        sb.append("], fields=[")
        for field in this.fields {
            sb.append(field.toString())
            sb.append(", ")
        }
        sb.append("])")
        return sb.toString()
    }
}

public enum AstStatement {
    Return {
        operand: AstToken<AstExpr>
    }
    Expr {
        value: AstToken<AstExpr>
    }
}

public enum AstOperator {
    Equals
    NotEquals
    Add
    Subtract
    Multiply
    Divide
    Modulus
    LeftShift
    RightShift
    BooleanOr
    BooleanAnd
    LessThanOrEquals
    GreaterThanOrEquals
    LessThan
    GreaterThan
    As
    Not
    NonNullAssertion
    Spread
    NullCoalesce
    MemberAccess
}

implement ToString for AstOperator {
    toString(): string => match this {
        Equals => "=="
        NotEquals => "!="
        Add => "+"
        Subtract => "-"
        Multiply => "*"
        Divide => "/"
        Modulus => "%"
        LeftShift => "<<"
        RightShift => ">>"
        BooleanOr => "or"
        BooleanAnd => "and"
        LessThanOrEquals => "<="
        GreaterThanOrEquals => ">="
        LessThan => "<"
        GreaterThan => ">"
        As => "as"
        Not => "not"
        NonNullAssertion => "!"
        Spread => "..."
        NullCoalesce => "??"
        MemberAccess => "."
    }
}

public enum AstExpr {
    Null
    BoolLit {
        value: bool
    }
    StringLit {
        value: string
    }
    CharLit {
        value: char
    }
    SignedIntLit {
        value: int64
    }
    Unary {
        operator: AstToken<AstOperator>
        operand: AstToken<AstExpr>
    }
    Binary {
        lhs: AstToken<AstExpr>
        operator: AstToken<AstOperator>
        rhs: AstToken<AstExpr>
    }
}

public class AstKeidProgram {
    namespace: AstToken<string>
    imports: List<AstToken<string>>
    classes: List<AstClass>
}

implement ToString for AstKeidProgram {
    toString(): string {
        let sb = StringBuilder.empty()
        sb.append("AstKeidProgram(namespace=")
        sb.append(this.namespace.node)
        sb.append(", imports=[")
        for import in this.imports {
            sb.append(import.node)
            sb.append(", ")
        }
        sb.append("], classes=[")
        for class in this.classes {
            sb.append(class.toString())
            sb.append(", ")
        }
        sb.append("])")
        return sb.toString()
    }
}
