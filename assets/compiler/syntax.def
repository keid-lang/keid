// This file defines the Keid syntax in Keid Syntax Definition Language (KSDL).
// The parser for this file can be found in `parser.keid`.
// See "syntax.def.README.md" for documentation regarding the format of this file.

RULE HexInteger CONTIGUOUS
    LITERAL 0x
    MOVE
    REPEATED OR(RANGE 0-9, RANGE a-f, RANGE A-F)
END RULE

RULE DecimalInteger CONTIGUOUS
    COMPOUND(RANGE 1-9, OPTIONAL REPEATED RANGE 0-9)
END RULE

RULE Integer CONTIGUOUS
    $sign = OPTIONAL OR(LITERAL +, LITERAL -)
    $value = OR(RULE HexInteger, RULE DecimalInteger)
END RULE

RULE String
    LITERAL "
    UNTIL LITERAL "
END RULE

RULE Char
    LITERAL '
    UNTIL LITERAL '
END RULE

RULE Bool
    OR(LITERAL true, LITERAL false)
END RULE

RULE Null
    LITERAL null
END RULE

RULE Identifier CONTIGUOUS
    OR(RANGE A-Z, RANGE a-z, LITERAL _)
    OPTIONAL REPEATED OR(RANGE A-Z, RANGE a-z, LITERAL _, RANGE 0-9)
END RULE

RULE ArrayType
    LITERAL [
    $elementType = ALIAS ValueType
    LITERAL ]
END RULE

RULE NullableType
    LITERAL ?
    $elementType = ALIAS ValueType
END RULE

RULE BasicType
    $path = RULE PathQualifier
    $generics = OPTIONAL RULE GenericArgs
END RULE

ALIAS ValueType OR(RULE ArrayType, RULE NullableType, RULE BasicType)

RULE Modifier
    OR(LITERAL public, LITERAL static, LITERAL extern)
END RULE

RULE GenericDecl
    $name = RULE Identifier
END RULE

RULE GenericDecls
    LITERAL <
    MOVE
    $decls = RULE GenericDecl
    OPTIONAL REPEATED COMPOUND(LITERAL COMMA, $decls = RULE GenericDecl)
    LITERAL >
END RULE

RULE GenericArgs
    LITERAL <
    MOVE
    $args = ALIAS ValueType
    OPTIONAL REPEATED COMPOUND(LITERAL COMMA, $args = ALIAS ValueType)   
    LITERAL >
END RULE

RULE ClassDecl
    $modifiers = OPTIONAL REPEATED RULE Modifier
    LITERAL class
    MOVE
    $name = RULE Identifier
    $generics = OPTIONAL RULE GenericDecls
    LITERAL {
END RULE

RULE PathQualifier
    RULE Identifier
    OPTIONAL REPEATED COMPOUND(LITERAL ::, RULE Identifier)
END RULE

RULE NamespaceStatement
    LITERAL namespace
    MOVE
    $namespace = RULE PathQualifier
END RULE

RULE ImportStatement
    LITERAL import
    MOVE
    LITERAL (
    REPEATED LITERAL NEWLINE
    $modules = RULE PathQualifier
    OPTIONAL REPEATED COMPOUND(REPEATED LITERAL NEWLINE, $modules = RULE PathQualifier)
    LITERAL )
END RULE

RULE RootStatement
    MOVE
    $st = OR(RULE ImportStatement, RULE ClassDecl)
    LITERAL NEWLINE
END RULE

RULE Program
    OPTIONAL REPEATED LITERAL NEWLINE
    $namespace = RULE NamespaceStatement
    OPTIONAL REPEATED LITERAL NEWLINE
    OPTIONAL REPEATED COMPOUND($statements = RULE RootStatement, REPEATED LITERAL NEWLINE)
END RULE
