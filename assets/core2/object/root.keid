namespace core.object

import (
    core.string
    core.ops
)

public interface Default {
    static default(): object
}

public class Object {
}

public class Box<T> {
    element: T
}

public struct Bool {
    value: bool
}

implement ToString for Bool {
    toString(): string {
        if this.value {
            return "true"
        }
        return "false"
    }
}

public struct Char {
    value: char

    public get isWhitespace: bool => this.value == ' ' or this.value == '\n' or this.value == '\r' or this.value == '\t'

    public get isAlphanumeric: bool => (this.value >= 'A' and this.value <= 'Z') or (this.value >= 'a' and this.value <= 'z') or this.value == '_'
}

implement ToString for Char {
    toString(): string => string {
        chars = [char] { this.value }
    }
}

macro $IMPL_INT_TYPE(#wrapper: ident, #primitive: ident)
    public struct #wrapper {
        value: #primitive
    }

    implement ToString for #wrapper {
        toString(): string {
            let current = this.value
            if current == 0 {
                return "0"
            }
            
            let sb = StringBuilder.empty()
            for current > 0 {
                let digit = (current % 10) + 0x30 // converts the digit to its ascii equivalent
                sb.insert(0, String.fromUtf8(new uint8[digit as uint8]))
                current /= 10
            }

            return sb.toString()
        }
    }

    implement Hash for #wrapper {
        hash(hasher: Hasher) {
            hasher.write(this)
        }
    }
end macro

$IMPL_INT_TYPE(Int8,  int8)
$IMPL_INT_TYPE(Int16, int16)
$IMPL_INT_TYPE(Int32, int32)
$IMPL_INT_TYPE(Int64, int64)
$IMPL_INT_TYPE(ISize, isize)

$IMPL_INT_TYPE(UInt8,  uint8)
$IMPL_INT_TYPE(UInt16, uint16)
$IMPL_INT_TYPE(UInt32, uint32)
$IMPL_INT_TYPE(UInt64, uint64)
$IMPL_INT_TYPE(USize,  usize)

// $IMPL_FLOAT_TYPE(Float32, float32)
// $IMPL_FLOAT_TYPE(Float64, float64)
