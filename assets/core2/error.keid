namespace core.error

import (
    core.object
    core.string
)

public class Error {
    cause: ?Error
    message: string
    stacktrace: string

    public constructor new(this.message: string) {
        super.new()
        this.cause = null
        this.stacktrace = runtime.getStackFrames()
    }

    public withCause(cause: Error): Error {
        return Error.new(this.message) {
            .cause
            .stacktrace = this.stacktrace
        }
    }

    public print() {
        std.io.println(this.toString())
    }
}

implement ToString for Error {
    toString(): string {
        let builder = StringBuilder.withCapacity(this.message.length + this.stacktrace.length + 1)
        builder.append(this.message)
        builder.append("\n")
        builder.append(this.stacktrace)
        if this.cause != null {
            builder.append("Caused by: ")
            builder.append(this.cause!.toString())
        }
        return builder.toString()
    }
}

public function indexOutOfBounds(index: usize): Error => Error.create(string.format("index out of bounds: ", index.toString()))
public function indexOutOfBounds(index: isize): Error => Error.create(string.format("index out of bounds: ", index.toString()))

public function io(msg: string): Error => Error.create(string.format("IO error: ", msg))
